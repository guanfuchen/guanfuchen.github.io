<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on import python</title>
    <link>https://guanfuchen.github.io/post/</link>
    <description>Recent content in Posts on import python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Sep 2018 09:32:02 +0800</lastBuildDate>
    
	<atom:link href="https://guanfuchen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>论文ppt综述</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_09/%E8%AE%BA%E6%96%87ppt%E7%BB%BC%E8%BF%B0/</link>
      <pubDate>Tue, 18 Sep 2018 09:32:02 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_09/%E8%AE%BA%E6%96%87ppt%E7%BB%BC%E8%BF%B0/</guid>
      <description>小目标检测   Small object survey  from chenguanfu511</description>
    </item>
    
    <item>
      <title>视频目标检测</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Thu, 05 Jul 2018 23:18:00 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</guid>
      <description>相关资料  T-CNN: Tubelets with Convolutional Neural Networks for Object Detection from Videos vdetlib相关代码 Seq-NMS for Video Object Detection DeepID-Net: multi-stage and deformable deep convolutional neural networks for object detection Spatio-Temporal Closed-Loop Object Detection Object Detection in Videos with Tubelet Proposal Networks  相关博客  基于视频的目标检测 T-CNN网络的中文文档。  相关描述  目标检测在图像处理领域有着非常大的占比，过去两年，深度学习在Detection的持续发力，为这个领域带来了变革式的发展：一方面，从 RCNN 到 Fast RCNN，再到 Faster RCNN，不断刷新 mAP；
另一方面，SSD、YOLO 则是将性能提高到一个非常高的帧率。 对于视频来讲，相邻帧目标之间存在 明显的上下文关系，这种关系在技术上的表现就是 Tracking，研究过跟踪的童鞋都应该知道 经典算法 TLD，通过 Tracking-Learning-Detection 学习目标的帧间变换，并进行 Location。
基于视频的目标检测 要解决的是同样的问题，因为 变形、遮挡、运动Blur 等因素导致目标 在 中间帧无法检测到（Appearence 发生很大变化），可以从下图看到，基于 still-image 的方法在某些帧的检测置信度很低。</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/docker/</link>
      <pubDate>Wed, 04 Jul 2018 23:36:35 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/docker/</guid>
      <description> 参考资料  Docker 架构 菜鸟上关于docker教程的翻译。  </description>
    </item>
    
    <item>
      <title>Detectron</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/detectron/</link>
      <pubDate>Wed, 04 Jul 2018 23:22:11 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/detectron/</guid>
      <description> 安装相关 安装caffe2  直接编译，参考caffe2官网 docker安装，参考caffe2官网，对应的docker images下载地址。  安装Detectron # DETECTRON=/path/to/clone/detectron git clone https://github.com/facebookresearch/detectron $DETECTRON cd $DETECTRON/lib &amp;amp;&amp;amp; make cd ~ python2 $DETECTRON/tests/test_spatial_narrow_as_op.py  测试Detectron 需要下载COCO数据集，同时配置数据集路径。
 Detectron数据集配置  参考资料  FAIR-Detectron 开源代码 该篇博客介绍详细。 Detectron官网安装指南 MODEL_ZOO模型  </description>
    </item>
    
    <item>
      <title>图像检索</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E5%9B%BE%E5%83%8F%E6%A3%80%E7%B4%A2/</link>
      <pubDate>Wed, 20 Jun 2018 10:40:56 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E5%9B%BE%E5%83%8F%E6%A3%80%E7%B4%A2/</guid>
      <description> 相关资料  cnnimageretrieval-pytorch对应的项目主页CNN Image Retrieval  </description>
    </item>
    
    <item>
      <title>专利撰写问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E4%B8%93%E5%88%A9%E6%92%B0%E5%86%99%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 19 Jun 2018 15:18:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E4%B8%93%E5%88%A9%E6%92%B0%E5%86%99%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>专利撰写问题汇总及专利检索培训-1 问题汇总及案例分析 一、形式问题
 引用关系单一  新手建议从权利要求开始写，老手可能从一个问题的说明书开始，发散思路。
 权利要求书中的技术名词前后不一致。 权利要求书中中作出的修改，未在说明书摘要或说明书中修改。  问题汇总及案例分析 二、实质性问题 * 区分“非必要技术特征”和“必要技术特征” 主要是区分清楚什么是“非必要技术特征” * 定义技术名词时主要“上位概念”的应用 * 权利要求书中不要出现商业性宣传用语 * 数量范围、作用等技术标定的描述性词，作用特征模糊
专利检索查新常识  IPC分类号 国际分类法是一种国际通用的管理和利用专利文献的工具  IPC分类号可以用来进行竞争对手分析。</description>
    </item>
    
    <item>
      <title>SSD目标检测</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/ssd%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 16 Jun 2018 09:38:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/ssd%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</guid>
      <description> 相关资料  Understanding SSD MultiBox — Real-Time Object Detection In Deep Learning 没有涉及数学原理解释SSD目标检测。 caffe SSD 原论文使用的代码。 SSD-Tensorflow 使用Tensorflow实现的SSD算法。 ssd_eccv2016_slide.pdf 解释SSD工作的演示PPT。 ssds.pytorch ssd目标检测相关代码 avod-ssd 3d目标检测  </description>
    </item>
    
    <item>
      <title>YOLO总结</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/yolo%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 08 Jun 2018 15:18:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/yolo%E6%80%BB%E7%BB%93/</guid>
      <description>概述 将目标检测算法YOLO详细进行解析。
相关资料  YAD2K YAD2K: Yet Another Darknet 2 Keras YOLO-pytorch py-caffe-yolo 使用caffe的python接口实现的yolo目标检测。 Yolo_on_Caffe yolov1 v2 v3的caffe实现。  darkent darknet是作者开源的YOLO实现框架，纯CPP实现。
mac下安装 无opencv直接make即可，使用opencv可视化结果需编译opencv=1（Makefile）。
brew install opencv@2 # 修改Makefile中 #LDFLAGS+= `pkg-config --libs opencv` #COMMON+= `pkg-config --cflags opencv` LDFLAGS+= `pkg-config --libs /usr/local/opt/opencv@2/lib/pkgconfig/opencv.pc` COMMON+= `pkg-config --cflags /usr/local/opt/opencv@2/lib/pkgconfig/opencv.pc`  Cant make the YOLO when OPENCV=1 Ubuntu 17.10</description>
    </item>
    
    <item>
      <title>行人检测</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 08 Jun 2018 14:47:27 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E8%A1%8C%E4%BA%BA%E6%A3%80%E6%B5%8B/</guid>
      <description> 概述 行人检测作为目标检测的一个speical case，在研究中也有大量具体的方法，本文主要收集常用的行人检测数据集和方法。
相关资料  Ten Years of Pedestrian Detection, What Have We Learned，10年行人检测方面的综述类文章。  博客资料  2015-10-27-pedestrian-detection.md  </description>
    </item>
    
    <item>
      <title>电子书收集</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E7%94%B5%E5%AD%90%E4%B9%A6%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 07 Jun 2018 23:03:07 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E7%94%B5%E5%AD%90%E4%B9%A6%E6%94%B6%E9%9B%86/</guid>
      <description> 编程相关  studyFiles 其中包括git，go，js，node，python等等编程电子书。  </description>
    </item>
    
    <item>
      <title>深度估计</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E6%B7%B1%E5%BA%A6%E4%BC%B0%E8%AE%A1/</link>
      <pubDate>Wed, 06 Jun 2018 09:41:05 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_06/%E6%B7%B1%E5%BA%A6%E4%BC%B0%E8%AE%A1/</guid>
      <description> 参考资料 收集使用deep learning方法来估计深度的论文。
 PSMNet Pyramid Stereo Matching Network (CVPR2018)  </description>
    </item>
    
    <item>
      <title>Magick用法</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/magick%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 05 Jun 2018 14:39:49 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/magick%E7%94%A8%E6%B3%95/</guid>
      <description>概述 记录Image Magick常用命令。
SVG to PNG convert tmp.svg tmp.png  缩放图片 convert hugo.png -resize 20% hugo.png  参考资料 How to convert a SVG to a PNG with Image Magick?
ImageMagick v6 Examples
pdf to gif mkdir fun-with-im cd fun-with-im curl -o slides.pdf http://phyletica.org/downloads/dpp-3-slides.pdf 将pdf转换为png convert -density 600 slides.pdf -strip -resize @1048576 PNG8:slide-%02d.png 然后将png转换为gif convert -layers OptimizePlus -delay 75 slide-0?.png slide-1[01234].png -delay 300 slide-1[567].png -loop 0 slides.gif  思路是将pdf转换为png，然后将png转换为gif。
Converting PDF slides to animated GIFs and videos with ImageMagick</description>
    </item>
    
    <item>
      <title>Bash用法</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/bash%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 05 Jun 2018 14:08:48 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/bash%E7%94%A8%E6%B3%95/</guid>
      <description>判断文件夹是否存在 if [ ! -d &amp;quot;FOLD&amp;quot; ]; then echo &amp;quot;FOLD not exist&amp;quot; fi  shell bash判断文件或文件夹是否存在</description>
    </item>
    
    <item>
      <title>Pyqt用法</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/pyqt%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 31 May 2018 10:15:29 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/pyqt%E7%94%A8%E6%B3%95/</guid>
      <description> qt 在qt和qtcreator下载qtcreator。
mac安装qt Mac下Qt的环境搭建
参考资料  qtawesome pyqt中图形化的字体。  </description>
    </item>
    
    <item>
      <title>Caffe资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/caffe%E8%B5%84%E6%96%99/</link>
      <pubDate>Tue, 29 May 2018 11:42:27 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/caffe%E8%B5%84%E6%96%99/</guid>
      <description>安装 MacOSX brew install -vd snappy leveldb gflags glog szip lmdb # need the homebrew science source for OpenCV and hdf5 brew tap homebrew/science brew install hdf5 opencv # with Python pycaffe needs dependencies built from source brew install --build-from-source --with-python -vd protobuf brew install --build-from-source -vd boost boost-python # without Python the usual installation suffices brew install protobuf boost  OS X Installation
以下是常见问题： - fatal error: &amp;lsquo;numpy/arrayobject.h&amp;rsquo; file not found，这是因为无法找到np路径</description>
    </item>
    
    <item>
      <title>学习率总结</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E5%AD%A6%E4%B9%A0%E7%8E%87%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 29 May 2018 10:37:12 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E5%AD%A6%E4%B9%A0%E7%8E%87%E6%80%BB%E7%BB%93/</guid>
      <description> 相关资料 记录深度学习中学习率相关资料。
 Learning-Rate 实现了常见的学习率论文。 Cyclical Learning Rates for Training Neural Networks 对应的pytorch实现pytorch.cyclic.learning.rate 如何在 PyTorch 中设定学习率衰减（learning rate decay） lr_scheduler.py pytorch中学习率的调整策略。  </description>
    </item>
    
    <item>
      <title>视觉里程计和SLAM</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E8%A7%86%E8%A7%89%E9%87%8C%E7%A8%8B%E8%AE%A1/</link>
      <pubDate>Thu, 24 May 2018 14:01:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E8%A7%86%E8%A7%89%E9%87%8C%E7%A8%8B%E8%AE%A1/</guid>
      <description> 概述 添加视觉里程计和slam相关知识整理。
相关资料  monoVO-python一个用python实现单目视觉里程计的项目。 Joint-VO-SF slam-python 用python学习rgbd-slam系列. limo 激光单目视觉里程计。 MVision 其中有大量SLAM相关的资料。  </description>
    </item>
    
    <item>
      <title>常见加速下载</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E5%B8%B8%E8%A7%81%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Tue, 22 May 2018 15:04:21 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E5%B8%B8%E8%A7%81%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD/</guid>
      <description>百度云加速 破解百度云限速
BaiduPCS-Go 好用的第三方下载工具，下载速度能达到1M多，应用简单，登陆后和服务器一样的操作，可以切换路径，同时直接下载。</description>
    </item>
    
    <item>
      <title>风格迁移相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 May 2018 16:06:12 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%A3%8E%E6%A0%BC%E8%BF%81%E7%A7%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description> 相关资料  pytorch-fast-neural-style-mobilenetV2 使用mobilenet进行风格迁移。 Style_Migration_For_Artistic_Font_With_CNN 艺术字风格迁移。 Deep Photo Style Transfer和对应代码deep-photo-styletransfer Neural-Style-Transfer-Papers 收集了大量风格迁移的论文，可以作为综述参考。  </description>
    </item>
    
    <item>
      <title>目标检测相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 May 2018 16:00:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>本仓库主要用来记录目标检测方面的相关技术。
相关资料  YOLO_v3_tutorial_from_scratch YOLO实现教程（PyTorch），值得深入，How to implement a YOLO (v3) object detector from scratch in PyTorch: Part 1网页教程。 deformable-convolution-pytorch 使用了deformable卷积进行目标检测。 PytorchSSD pytorch实现的SSD目标检测，pytorch-ssd。 mAP 目标检测度量mAP。 RefineDet Single-Shot Refinement Neural Network for Object Detection。 PeleeNet 移动设备上实时的目标检测网络。 Pelee移动设备上实时的目标检测系统，相关论文。 darknet_ros darknet在ROS中的包装。 A Review of Object Detection Based on Convolutional Neural Network综述类文章，比较浅显。 SSD: Single Shot MultiBox Detector Focal Loss for Dense Object Detection 对应代码keras-retinanet，pytorch-retinanet Speed/accuracy trade-offs for modern convolutional object detectors Focal Loss for Dense Object Detection以及对应的代码keras-retinanet Relation Networks for Object Detection 微软亚研院目标检测文章和对应代码Relation-Networks-for-Object-Detection。 HistoryObjectRecognition 非常好的显示目标检测的pdf，The Modern History of Object Recognition。 CheXNet-with-localization Weakly Supervised Learning for Findings Detection in Medical Images。 SNIPER: Efficient Multi-Scale Training 作者同时也提供了SSH人脸检测器的代码。 menpodetect menpo github组织上提供了大量人脸相关的工程，包含了AAM、SDM、CLM等等。 Dense Object Nets: Learning Dense Visual Object Descriptors By and For Robotic Manipulation，pytorch-dense-correspondence代码仓库 稠密的目标特征检测学习，可以用在机械臂上。 Deeply supervised salient object detection with short connections，以及对应的Salient-Object-Detection  博客资料  目标检测网络之 YOLOv3 目标检测算法总结 非常好的一篇目标检测算法综述博客。 弄懂目标检测（Faster R-CNN）？看这篇就够了！ 对于faster RCNN中的每一个结构的讲解十分详细。 Object detection: an overview in the age of Deep Learning 一系列博客，很好地介绍了目标检测的历史。 YOLO升级版：YOLOv2和YOLO9000解析 Understanding SSD MultiBox — Real-Time Object Detection In Deep Learning Object-Detection-Development 作者收集了很多目标检测方面的论文资料。 整理读研期间用过、改进过、写过的代码 作者主要专注于目标检测，可以参考。 Deep-learning-object-detection-links.</description>
    </item>
    
    <item>
      <title>搜索资源整理</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E6%90%9C%E7%B4%A2%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 18 May 2018 10:16:08 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/%E6%90%9C%E7%B4%A2%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</guid>
      <description>搜索相关 TORRENTKITTY 搜索神器。</description>
    </item>
    
    <item>
      <title>git_usage</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/git_usage/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/git_usage/</guid>
      <description>git使用简介 为什么使用git git在程序员中的地位就好像图书管理员对于读者来说，管理了代码、文档的修改。相比于中心式的版本控制系统，git是基于分布式版本控制，每一个仓库都能完整地追踪修改。
git的发展历程不得不提Linus和Linux，随着Linux代码的增加，Linus手动管理代码难度越来越大，社区也越来越不满这种低效地管理方式。尽管当时已经有不少优秀的集中式的版本控制系统，但是Linus不屑于使用这种系统（集中式的版本控制系统不但速度慢，而且必须联网才能使用）。然后Linus使用了一个商业的版本控制系统BitKeeper，该公司为了表达对开源的支持、尊重，授权给Linux社区免费试用。但是随后社区大牛试图对BitKeeper进行反向工程，被BitKeeper公司获悉后收回授权。此时不得不佩服大牛就是大牛，Linus花了两周时间就完成了git这个分布式版本控制系统，并且成功地部署了Linux代码的版本控制。在这之后，越来越多的开源项目使用git作为版本控制系统，甚至GitHub公司免费提供了git作为版本控制系统的云管理仓库。
怎么样使用git 安装git 请参阅各自系统安装git的文档。
安装git后配置用户名和邮箱。
git config --global user.name &amp;quot;Name&amp;quot; git config --global user.email &amp;quot;Email&amp;quot;  创建版本库 首先创建一个目录作为版本库的根目录，在该目录下使用git init .初始化该目录为版本库，此时版本库为空，目录会增加一个隐藏目录.git，该目录是git用来进行版本管理的目录，切记随意增加修改内容。
添加文件到版本库 首先创建一个文件ReadMe.md，输入内容第一次提交，然后输入命令git add ReadMe.md，此时文件ReadMe.md被提交到git的暂存区内stage。最后输入git commit -m &amp;quot;第一次提交&amp;quot;才将文件修改记录到git仓库中。
查看版本库状态 使用git status可以查看版本库提交、未提交、合并、未合并等状态。
查看文件修改内容 使用git diff ReadMe.md可以查看ReadMe.md的修改。
查看版本库提交日志 使用git log可以查看当前版本库历史提交日志，包括提交时间、提交注释、提交日志ID。
回退版本库 使用git reset --hard Head~1表示回退到上一版本，git reset --hard Head~n表示回退到上n版本。进行回退操作以后，回退ID后的修改都丢失了，此时如果知道最近的提交ID，那么通过git reset --hard 3628164可以 重新还原，其中3628164表示待还原的版本的ID。如果忘记了待还原的版本的ID，可以通过使用git reflog查看先前记录的版本的ID。
撤销修改 使用git checkout -- ReadMe.md可以撤销当前对文件的修改，如果此时暂存区中存在修改增加的版本，那么还原到当前，如果不存在那么文件内容还原到最近一次提交的内容，总之就是最近的一次提交。
如果想彻底丢弃当前工作区和暂存区中的文件内容，使用git reset HEAD ReadMe.md可以完成此功能。
删除文件 文件删除后可使用git rm ReadMe.md直接在git控制系统中删除ReadMe.md。
创建与合并分支 git checkout -b dev创建dev分支，在dev分支中修改ReadMe.</description>
    </item>
    
    <item>
      <title>gpu并行运算</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/gpu%E5%B9%B6%E8%A1%8C%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/gpu%E5%B9%B6%E8%A1%8C%E8%BF%90%E7%AE%97/</guid>
      <description>GPU 第五节课 名词解释  FLOPS 每秒钟能运行的浮点运算 GLOPS 每秒钟能运行的G浮点运算 TLOPS 每秒钟能运行的T浮点运算  为什么需要GPU  应用的需求越来越高 计算机技术由应用驱动 Application Driven  应用场景，石油勘探、气象预报
GPU（Graphic Processing Unit）
GPU是一个异构多处理器芯片，包含shader、工作分配器、输入、输出等。
执行单元（Execute shader），包含数据、ALU和执行上下文（Execution Context）
CPU类型的内核，数据缓存、OOO、分支预测器、存储器的管理单元。
通过CPU思考如何加速： - 思路一 精简（slimming down），去除某些组件加快运行速度。 - 思路二 2个核，同时执行2个程序片元，同时并行。4个核，同时执行4个程序片元。以此类推，增加核的数目，同时执行的程序片元也进行增加。指令流共享，多个程序片元共享指令流。 - 思路三 增加ALU、SIMD，增加的ALU可以单指令处理多数据。
经过以上的思路，改进的处理单元。
16核8ALU可以完成128个程序片元同时执行。
停滞问题的解决思路： - 大量的独立片元相互切换 - 通过片元切换来掩藏延迟</description>
    </item>
    
    <item>
      <title>概率论和数理统计</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%92%8C%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%92%8C%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</guid>
      <description>概率论和数理统计 主要在记录公开课【公开课】概率论与数理统计（浙江大学）学习内容。
第一课 对“随机”有足够的认识，对“数据”有足够的兴趣。
 对“随机”有足够的认识，即能随时随地用“随机”的观点去观察、看待、处理周围的事物。如：探索物理、化学或生物学中随机现象的规律性。 对“数据”有兴趣、有感觉，即要善于发现、善于利用、善于处理周围的数据。如：从网购票据发现有价值的信息。
 第二课 样本空间和随机现象
确定性现象，不确定性现象
 对随机现象的观察、记录、实验统称为随机试验。它具有以下特性： - 可以在相同条件下重复进行； - 事先知道所有可能出现的结果； - 进行试验前并不知道哪个试验结果会发生。
 样本空间 定义：随机试验的所有可能结果构成的集合称为样本空间，记为$S={e}$。S中的元素称为样本点。
随机事件 定义：样本空间S的子集A称为随机事件A，简称事件A。当且仅当A中的某个样本点发生称事件A发生。事件A的表示可用集合，也可以用语言来表示。
必然事件 定义：如果把S看作事件，则每次试验S总是发生，所以S称为必然事件。
基本事件 定义：如果事件只含有一个样本点，称其为基本事件。
不可能事件： 定义：如果事件
参考资料 stat-cookbook 统计相关的cookbook。
概率论与数理统计 公式（全） 其中有概率论和数理统计的所有公式。
《统计思维：程序员数学之概率统计》书籍阅读。
[学习资料]概率论与数理统计 其中包括了概率论和数理统计相关的PPT。
Probabilistic Systems Analysis and Applied Probability
2. Introduction to Statistics (cont.) MIT年轻老师的公开课，比较快，喜欢复古的可以看1. Probability Models and Axioms，有种和上线性代数那个风格类似的感觉【英字】MIT公开课 概率论国内，其课件Probabilistic Systems Analysis and Applied Probability
关于概率论主干课程的训练
StatsLearning Lect1/2b 111213 v2 统计学中ESL的youtube课程。</description>
    </item>
    
    <item>
      <title>深度学习面试_总结</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95_%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95_%E6%80%BB%E7%BB%93/</guid>
      <description>简要介绍SVM 支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二分类模型，基本模型定义为特征空间上的间隔最大的线性分类器，学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。其中支持向量是满足$|w^Tx+b|=1$的点，除了支持向量外所有的点满足$y|w^Tx+b|&amp;gt;=1$。这种方式得到的模型能够用来处理线性的情况，通过引入核函数将扩展到非线性情况下。
事实上，大部分时候数据并不是线性可分的，这个时候满足这样条件的超平面就根本不存在。在上文中，我们已经了解到了SVM处理线性可分的情况，那对于非线性的数据SVM咋处理呢？对于非线性的情况，SVM 的处理方法是选择一个核函数，通过将数据映射到高维空间，来解决在原始空间中线性不可分的问题。 具体来说，在线性不可分的情况下，支持向量机首先在低维空间中完成计算，然后通过核函数将输入空间映射到高维特征空间，最终在高维特征空间中构造出最优分离超平面，从而把平面上本身不好分的非线性数据分开。
核函数将原先的公式用非线性变换$\phi$转换，首先使用一个非线性映射将数据变换到一个特征空间F，然后在特征空间使用线性学习器分类。 $$f(x,y)=w^Tx+b$$ $$f(x,y)=w^T\phi(x)+b$$
常用核函数： - 多项式核函数 $$k(x_1,x_2)=(+R)^d$$ - 高斯核函数 $$k(x_1,x_2)=\exp(-\frac{||x_1-x_2||}{2\theta^2})$$ - 线性核函数
上述证明都是基于不存在outilers的情况下，但是实际过程中，在最大间隔间中存在outilers，此时引入松弛变量来处理，也就是酱outilers中的点也加入到Loss中，其中C为松弛变量。
主要构造不等式约束的拉格朗日乘子法，然后用对偶方式将minmax转换为maxmin的方式进行求解。
拉格朗日乘子法、KKT条件 拉格朗日乘子法：
单一等式约束的拉格朗日乘子法： $$min_{(x, y)}{f(x,y)}$$ $$s.t.\ g(x,y)=c$$
表示最优化满足如下条件： $$\nabla f(x,y)=\lambda \nabla (g(x,y)-c)$$ 即最优化点满足两个函数的法向量相同，如下构造拉格朗日乘子： $$L(x,y,\lambda)=f(x,y)+\lambda (g(x,y)-c)$$
多个等式约束的拉格朗日乘子法 将单一等式约束的拉格朗日乘子法扩展即可： $$min{(x, y)}{f(x,y)}$$ $$s.t.\ g{i}(x,y)=0, i=1,2,&amp;hellip;,N$$ $$L(x,y,\lambda)=f(x,y)+\sum{i=1}^{N}{\lambda{i} g_{i}(x,y)}$$
广义拉格朗日乘子法 $$min{(x, y)}{f(x,y)}$$ $$s.t.\ g{i}(x,y)=0, i=1,2,&amp;hellip;,N$$ $$h{i}(x,y)&amp;lt;=0, i=1,2,&amp;hellip;,M$$ 构造广义拉格朗日乘子法 $$L(x,y,\alpha,\beta)=f(x,y)+\sum{i=1}^{N}{\alpha{i} g{i}(x,y)}+\sum{i=1}^{M}{\beta{i} h{i}(x,y)}$$ 满足如下KKT条件即可求得最优解： - 法向量相同 $$\nabla L(x,y,\alpha,\beta)=0$$ - 基本条件 $$g{i}(x,y)=0, i=1,2,&amp;hellip;,N$$ $$h_{i}(x,y)&amp;lt;=0, i=1,2,&amp;hellip;,M$$ - 不等约束系数非负 $$\beta_i&amp;gt;=0, i=1,2,&amp;hellip;,M$$ - 不等约束和系数其中一个为0 $$\beta_i h_i(x,y)=0, i=1,2,&amp;hellip;,M$$</description>
    </item>
    
    <item>
      <title>线性代数的本质</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid>
      <description>线性代数的本质 1 序言 矩阵乘法（matrix multiplication）、行列式（determinant）、叉积（cross products）
为什么叉积和行列式有所关联？
特征值究竟代表了什么？（eigen value）
数值计算和几何直观
2 向量是什么 物理学上，向量=方向和大小
计算机专业，向量=数字列表
数学专业，向量的运算，向量加法和向量数乘，线性代数中，向量都是以原点为起点。
向量的数乘和向量的加法
直观的图形解释可以查看动画
3 线性组合和基 向量坐标中有两个特别的向量，$\hat{i}$和$\hat{j}$，二维空间中的向量都可以使用这两个基向量表示。另外除了这两个特殊的向量，对于任何两个不共线的向量，也可以表示二维空间中的任意向量。
向量的张成表示向量的线性组合能表示的空间组合。
线性相关的向量不对向量的张成有任何贡献，只有线性无关的向量才能增加向量的张成。
空间的一组基（span）的严格定义：张成该空间的一个线性无关向量的集合。
4 矩阵与线性变换 线性变换的概念以及它和矩阵的关系。变换意味着输入、输出。
向量的变换可以转换为向量对于一个变换矩阵的乘积。
如果变换矩阵中的元素是线性相关的，那么变换后的维度将会降低。
从线性变换的角度来思考矩阵乘法、行列式、基变换和特征值。
5 矩阵乘法与矩阵变换 线性变换由基向量的变换决定。矩阵相乘的几何意义就是两个线性变换相继作用。函数复合时f(g(x))和矩阵MN都是需要从右向左进行变换的。
6 三维空间中的线性变换 三维空间中的线性变换和二维空间中的线性变换类似，可以看作是$\hat{i}$、$\hat{j}$和$\hat{k}$的变换即可。
7 行列式 行列式测量了对变换影响的程度，二维空间中的变换矩阵的行列式表示了变换面积的大小。
如果一个矩阵的行列式是0，那么这个矩阵所代表的变换将空间压缩到更小的维度下。
另外行列式也可能是负数，这意味着变换旋转了180度。
三维空间中的变换矩阵的行列式表示了变换体积的大小。三维空间中的变换矩阵的行列式为0意味着将三维空间压缩到二维空间、线或者点。三维空间中的变换矩阵为负数，表示和右手定理不符合。
8 逆矩阵、列空间与零空间 高斯消元法
逆变换来解释方程解，$Ax=b$等价于$x=A^{-1}b$，求解过程$A^{-1}Ax=A^{-1}b$，如果$det(A) \neq 0$，但是$det(A) = 0$，那么矩阵的逆不存在，解依然存在。
变换为平面的情况下，矩阵的秩为2，变换为直线的情况下，矩阵的秩为1，变换为点的情况下，矩阵的秩为0。这里秩（Rank）代表了变换后的空间的维数。对于3维空间，秩小于3那么空间被压缩了。
不管是一条直线、一个平面还是三维空间，所有可能的变换结果的集合，称为矩阵的列向量。所以更精确的秩的定义是列空间的维数。满秩，列空间与秩相等。零向量。
9 非方阵 $2x3$的非方阵将3维空间变换到2维空间，$3x2$的非方阵将2维空间变换到3维空间中。
10 点积与对偶性 点积（dot products）。点积的理解为对偶性。
11 叉积 12 叉积（线性变换） 13 参考链接 【官方双语/合集】线性代数的本质 - 系列合集</description>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 08 Apr 2018 14:11:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>参考链接 背包问题 本文将背包问题阐述地较好，可以作为参考。</description>
    </item>
    
    <item>
      <title>markdown_usage</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/markdown_usage/</link>
      <pubDate>Thu, 05 Apr 2018 11:06:19 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_04/markdown_usage/</guid>
      <description>Markdown简要指南 为什么使用Markdown Markdown是一种轻量级的标记语言，语法简洁，易导出为各种格式的文件，如PDF、HTML等。
尽管有大量的文字处理软件出现，如Word、WPS等，但是这些工具都是需要使用可视化操作来完成字体的格式设置，图片的插入，而Markdown仅仅使用简单的几种标记就能实现这些操作，基于键盘都可以快速完成，实现了一种沉浸式的写作环境中。
这种格式已经被GitHub、简书等大量采用，尤其对于GitHub，使用word编写的文档在git内每一次提交都是增量式提交一个新的文件，而Markdown格式的文档由于是纯文本内容，每一次变动都是增量式变动的内容，减小了仓库的大小，也有利于追踪每一次变更的内容。
综上所述，使用Markdown具有如下优点： - 专注于文字内容，沉浸式写作。 - 易导出为PDF、HTML等格式的文档。 - 纯文本内容，易于Git仓库增量提交。 - 标记语法简洁。
怎么样使用Markdown 不知道有没有安利到一些同学学习Markdown，大部分还未接触过Markdown的同学可以在简书中体验一下用Markdown来写技术博客的快感。那么接下来简要介绍Markdown的语法，完成常用的文字排版。详细文档可参考Markdown快速入门和Markdown详细入门
标题 Markdown中总共有六级标题，在文字前加#号即可实现，其中#是一级标题，##是二级标题，以此类推，######是六级标题。
# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题  粗体 Markdown的粗体使用两个*包含一段文本表示。
**粗体**  斜体 Markdown的*斜体*使用一个*包含一段文本表示。
*斜体*  图片 图片是文本编辑中必不可少的，适当地添加图片能够美化文档。Markdown在如下括号内插入图片url即可。
使用图床工具可以上传图片并生成一个图片url，安利一下七牛吧，不过免费的容量有限，另外也可以使用github建一个仓库，使用仓库中图片url也可以。
![](http://chenguanfuqq.gitee.io/tuquan2/img_2018_4/zju_logo.png)  链接 Markdown文本链接非常简单，在如下括号中插入链接url即可。
[链接](https://github.com/)  代码 对于程序员来说，使用Markdown来书写技术博客，经常要插入代码，同时希望能高亮代码，插入代码同样简单，使用如下格式插入代码即可。
` import os \`
import os  部分Markdown渲染器支持不同格式的代码高亮，如下格式输入对应的代码语言即可。
`python import os \`
import os  分割线 markdown中插入分割线，需要另起一行，连续输入三个&amp;mdash;即可。
---  列表 列表分为有序列表和无序列表，格式如下所示。</description>
    </item>
    
    <item>
      <title>ROS导航调试</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/ros%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sat, 31 Mar 2018 10:27:34 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_05/ros%E5%AF%BC%E8%88%AA%E8%B0%83%E8%AF%95/</guid>
      <description>ROS导航调试 明天试试blank_map.yaml和blank_map.pgm，参考blank_map.yaml
提供了p3at机器人的footprint。
footprint: [ [0.3302, -0.0508], [0.254, -0.0508], [0.254, -0.254], [-0.254, -0.254], [-0.254, 0.254], [0.254, 0.254], [0.254, 0.0508], [0.3302, 0.0508] ]  BaseLocalPlanner配置 base_local_planner_params.yaml，修改xy_goal_tolerance和yaw_goal_tolerance容忍度，降低目标精度。
全局配置 全局配置时静态图为true，也就是地图不随着改变。
plugins: - {name: static_layer, type: &amp;quot;costmap_2d::StaticLayer&amp;quot;} - {name: obstacle_layer, type: &amp;quot;costmap_2d::VoxelLayer&amp;quot;} - {name: inflation_layer, type: &amp;quot;costmap_2d::InflationLayer&amp;quot;}  本地配置 本地配置时静态图为false，也就是地图随着局部更新。 降低分辨率
# 增加静态层和障碍物层 plugins: - {name: static_layer, type: &amp;quot;costmap_2d::StaticLayer&amp;quot;} - {name: obstacle_layer, type: &amp;quot;costmap_2d::ObstacleLayer&amp;quot;}  图像相关 由于图像数据量较大，同时ROS网络带宽问题，考虑增加多个路由（无人机和无人车自身WI-FI不稳定）级联。
ManagingPlugins image_transport中相关插件。
rqt_image_view 针对rqt的插件image_view。
rqt_gui rosrun rqt_gui rqt_gui可视化rqt相关参数以及image_view等其他插件接口。</description>
    </item>
    
    <item>
      <title>深度学习基础</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 03 Mar 2018 23:38:00 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</guid>
      <description>阅读书籍 Data-Science-books 收集了部分关于深度学习的书籍
Coursera 上有哪些课程值得推荐？ 其中关于机器学习课程的值得一看，尤其是数学知识相关。
 《深度学习》，Bengio和Goodfellow DeepLearningBookQA_cn 那些深度学习《面试》你可能需要知道的 deepLearningBook-Notes相关读书笔记 斯坦福机器学习课程 《统计学习方法》，李航 lihang_book_algorithm 作者使用python实现了所有的算法 li_hang 李航书籍的PPT static_study 《统计学习方法》的读书笔记 统计学习方法：习题笔记 习题的笔记 返回主页 刘建平Pinard 博主整理了很多书上的内容，可以作为复习参考 《神经网络与深度学习》，吴岸城 《神经网络与深度学习》讲义 《神经网络与深度学习》讲义（Notes on Artificial Neural Networks and Deep Learning）从感知器到多层感知器到卷积网络 《机器学习》，周志华 机器学习：习题笔记（一） 提供了课后习题的相关思路 《斯坦福大学2014机器学习课程笔记》，Andrew Ng主讲，黄海广整理笔记 《凸优化》为什么凸优化这么重要？ 機器學習中的優化理論，需要學習哪些資料才能看懂？ 凸优化书籍推荐？ 《Neural Networks and Learning Machines》 機器學習基石上 (Machine Learning Foundations)&amp;mdash;Mathematical Foundations 机器学习资料大汇总 机器学习学习大纲 对于机器学习中常用的模型和数学知识进行了罗列，其中的知识介绍接近李航的统计学系方法，很有系统性，推荐。 分布式 ecosystem 使用分布式技术来搭建深度学习框架。 高等微積分 高等微積分 台大老师讲解的微积分，非常棒。 《Machine Learning in Action》书籍阅读，可以在apachecn中的MachineLearning书籍中找到。 Learn_Deep_Learning_in_6_Weeks llSourcell的课程slides，包括CNN、RNN和GAN。 Theories of Deep Learning (STATS 385) deep learning背后的数学原理，deeplearning-math.</description>
    </item>
    
    <item>
      <title>神经网络分享</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E4%BA%AB/</link>
      <pubDate>Sat, 03 Mar 2018 23:38:00 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E4%BA%AB/</guid>
      <description>神经网络（Neural Network） 第四期分享会 汇报人：陈官富 2018.3.23 引言 神经网络被广泛应用在图像分类、图像分割、目标跟踪等领域 引言 引言 引言 引言 人工智能、机器学习、表示学习、深度学习和CNN之间的关系 引言 传统机器学习 VS 深度学习
引言 典型的图像分类Pipeline
多层感知机-卷积神经网络**），感知器可以实现简单的分类操作，由**感知器**组成的一个**多层感知机**（MLP）能够表示更大的假设空间（学习能力更强），实现权值共享的多层感知机也就是卷积神经网络，减少了训练的参数，极大地加快了训练，增强了上下文信息建模能力，从而被广泛应用在图像、语音等二维数据上。 -- 目录  感知器（Perceptron）  梯度下降算法（Gradient Descent）  多层感知器（MLP）  反向传播算法（Back Propogation）  卷积神经网络（Convolution Neural Network） 循环神经网络（Recurrent Neural Network）  感知器 感知器 输入：样本的特征向量$x$ 输出：样本的类别$y \in {-1, +1}$ 模型： $$f(x)=sign(w \cdot x+b)$$ $$sign(x)=\begin{cases} 1&amp;amp; if&amp;amp; x&amp;gt;0
0&amp;amp; if&amp;amp; x \leq 0 \end{cases}$$ 其中$w$和$b$是感知器参数，$w$是权重（weight），$b$是偏置（bias），$sign$是符号函数。
感知器 $$y_i=sign(w^{(1)}x_i^{(1)}+w^{(2)}x_i^{(2)}+&amp;hellip;+w^{(d)}x_i^{(d)}+b)$$ 其中$i=1,2,&amp;hellip;,N,$，$N$为样本数，$d$为输入样本的特征维度，训练集为$T={x_1,x_2,&amp;hellip;,x_N}$，$y_i \in {-1, +1}$，$+1$表示正样本，$-1$表示负样本。 感知器 感知器 计算简单的逻辑功能</description>
    </item>
    
    <item>
      <title>LeetCode相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_02/leetcode%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 26 Feb 2018 20:27:54 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_02/leetcode%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>鸡汤 LeetCode 刷题指南（一）：为什么要刷题 对leetcode的评价非常客观
常用算法 并查集(Union-Find)算法介绍
LeetCode 解题报告(684，685)-并查集介绍及应用
遗留问题 725. Split Linked List in Parts
654. Maximum Binary Tree 题目大意： 给定无重复的数组。一棵最大树定义如下： 从数组中挑选最大的数字作为根 挑选左半数组中最大的数字作为左子树的根 挑选右半数组中最大的数字作为右子树的根 递归此过程。
# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def constructMaximumBinaryTree(self, nums): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :rtype: TreeNode &amp;quot;&amp;quot;&amp;quot; if not nums: return None maxn = max(nums) idx = nums.</description>
    </item>
    
    <item>
      <title>KMP算法相关</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_02/kmp%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 26 Feb 2018 19:41:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_02/kmp%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/</guid>
      <description>相关资料 可参考大话数据结构中串的一节KMP匹配 Algorithm Implementation/String searching/Knuth-Morris-Pratt pattern matcher 字符串匹配的KMP算法 主要参考大神阮一峰进行学习的，下面均来自于其博客。 The Knuth-Morris-Pratt Algorithm in my own words
核心思路是将比较过的位置不要继续进行比较，其中使用《部分匹配表》（Partial Match Table）既可以解决这个问题。已知空格与D不匹配时，前面六个字符&amp;rdquo;ABCDAB&amp;rdquo;是匹配的。查表可知，最后一个匹配字符B对应的&amp;rdquo;部分匹配值&amp;rdquo;为2，因此按照下面的公式算出向后移动的位数：
移动位数 = 已匹配的字符数 - 对应的部分匹配值 因为 6 - 2 等于4，所以将搜索词向后移动4位。  下面介绍《部分匹配表》是如何产生的。
首先，要了解两个概念：&amp;rdquo;前缀&amp;rdquo;和&amp;rdquo;后缀&amp;rdquo;。 &amp;ldquo;前缀&amp;rdquo;指除了最后一个字符以外，一个字符串的全部头部组合；&amp;rdquo;后缀&amp;rdquo;指除了第一个字符以外，一个字符串的全部尾部组合。
&amp;ldquo;部分匹配值&amp;rdquo;就是&amp;rdquo;前缀&amp;rdquo;和&amp;rdquo;后缀&amp;rdquo;的最长的共有元素的长度。以&amp;rdquo;ABCDABD&amp;rdquo;为例，
　－　&amp;quot;A&amp;quot;的前缀和后缀都为空集，共有元素的长度为0； －　&amp;quot;AB&amp;quot;的前缀为[A]，后缀为[B]，共有元素的长度为0； －　&amp;quot;ABC&amp;quot;的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0； －　&amp;quot;ABCD&amp;quot;的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0； －　&amp;quot;ABCDA&amp;quot;的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&amp;quot;A&amp;quot;，长度为1； －　&amp;quot;ABCDAB&amp;quot;的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&amp;quot;AB&amp;quot;，长度为2； －　&amp;quot;ABCDABD&amp;quot;的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。  &amp;ldquo;部分匹配&amp;rdquo;的实质是，有时候，字符串头部和尾部会有重复。比如，&amp;rdquo;ABCDAB&amp;rdquo;之中有两个&amp;rdquo;AB&amp;rdquo;，那么它的&amp;rdquo;部分匹配值&amp;rdquo;就是2（&amp;rdquo;AB&amp;rdquo;的长度）。搜索词移动的时候，第一个&amp;rdquo;AB&amp;rdquo;向后移动4位（字符串长度-部分匹配值），就可以来到第二个&amp;rdquo;AB&amp;rdquo;的位置。</description>
    </item>
    
    <item>
      <title>HPEC月例会_2018年_1月</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_01/hpec%E6%9C%88%E4%BE%8B%E4%BC%9A_2018%E5%B9%B4_1%E6%9C%88/</link>
      <pubDate>Tue, 02 Jan 2018 17:15:47 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2018_01/hpec%E6%9C%88%E4%BE%8B%E4%BC%9A_2018%E5%B9%B4_1%E6%9C%88/</guid>
      <description>图像拼接 维护标签图和原始图，不断增加贴图扩大语义地图 图像拼接算法简述如下：
 提取特征点并计算描述子，如SIFT、SURF、ORB等 匹配特征点，计算H矩阵，两幅图像的变换矩阵 使用H矩阵将新图warp到一个柱面上，和旧图进行拼接 拼接后的图片作为旧图，新图循环上述操作形成大图  语义地图拼接算法简述如下：
 提取特征点并计算描述子，如SIFT、SURF、ORB等 匹配特征点，计算H矩阵，两幅图像的变换矩阵 输入语义网络中计算每一时刻当前的语义标签 使用H矩阵将新图warp到一个柱面上，和旧图进行拼接使用H矩阵将新语义标签图warp到一个柱面上，和旧语义标签图进行拼接 拼接后的图片作为旧图，新图循环上述操作形成大图  测试图像gif 最后拼接的大图 工大无人机视频语义图拼接原图 工大无人机视频语义图拼接结果 具体代码仓库和结构如下： def main(): # Get input set of images img1 = cv2.imread(sys.argv[1]) img2 = cv2.imread(sys.argv[2]) img1_label = None img2_label = None if len(sys.argv) == 5: img1_label = cv2.imread(sys.argv[3]) img2_label = cv2.imread(sys.argv[4]) # print(&#39;img1_label:&#39;, img1_label) # print(&#39;img2_label:&#39;, img2_label) # Equalize histogram img1 = equalize_histogram_color(img1) img2 = equalize_histogram_color(img2) # Show input images #input_images = np.</description>
    </item>
    
    <item>
      <title>微信开发相关内容</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</link>
      <pubDate>Wed, 27 Dec 2017 17:16:59 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</guid>
      <description>调用接口查看 接口调用频次限制说明
接口权限
WeRoBot.Client —— 微信 API 操作类</description>
    </item>
    
    <item>
      <title>NIPS资料整理</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/nips%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 15 Dec 2017 11:54:21 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/nips%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</guid>
      <description>NIPS2017 收集NIPS 2017相关文章
nips_2017</description>
    </item>
    
    <item>
      <title>ErfNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/efficient_convnet_for_real-time_semantic_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 15 Dec 2017 11:50:05 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/efficient_convnet_for_real-time_semantic_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 ERFNet: Efficient Residual Factorized ConvNet for Real-time Semantic Segmentation
Efficient ConvNet for Real-time Semantic Segmentation
代码运行 erfnet
erfnet_pytorch
相关描述 这些文章关注点在语义分割实时性上。</description>
    </item>
    
    <item>
      <title>One Shot_Video_Object_Segmentation论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/one-shot_video_object_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 14 Dec 2017 10:38:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/one-shot_video_object_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 One-Shot Video Object Segmentation(OSVOS) 论文 OSVOS-caffe OSVOS-TensorFlow 项目主页
博客资料 One-Shot Video Object Segmentation论文笔记
相关描述 本文任务为从视频中的第一帧mask分割将来帧的物体。</description>
    </item>
    
    <item>
      <title>网络loss相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E7%BD%91%E7%BB%9Closs%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Tue, 12 Dec 2017 22:54:20 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E7%BD%91%E7%BB%9Closs%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>博客资料  pytorch loss function 总结 PyTorch中的Loss Fucntion loss_functions_explained llSourcell讲解的loss函数示例代码  相关描述 分类模型使用cross-entropy而不是classifier error的原因是，分类模型用cross-entropy。这里使用一个例子来解释cross-entropy在分类模型中的优势。
深度学习中的Loss Function有很多，常见的有L1、L2、HingeLoss、CrossEntropy，其最终目的就是计算预测的 f(x)f(x) 与真值 yy 之间的差别，而优化器的目的就是minimize这个差值，当loss的值稳定后，便是f(x)f(x) 的参数WW最优的时候。
首先引入交叉熵的概念。Cross Entropy（也就是交叉熵）来自香农的信息论，简单来说，交叉熵是用来衡量在给定的真实分布pkpk下，使用非真实分布qkqk所指定的策略 f(x)f(x) 消除系统的不确定性所需要付出的努力的大小。交叉熵的越低说明这个策略越好，我们总是minimize交叉熵，因为交叉熵越小，就证明算法所产生的策略越接近最优策略，也就间接证明我们的算法所计算出的非真实分布越接近真实分布。交叉熵损失函数从信息论的角度来说，其实来自于KL散度，只不过最后推导的新式等价于交叉熵的计算公式：
$$H(p,q)=-\sum_{k=1}^{N}(p_k*\log{q_k})$$
最大似然估计、Negative Log Liklihood(NLL)、KL散度与Cross Entropy其实是等价的，都可以进行互相推导，当然MSE也可以用Cross Entropy进行对到出（详见Deep Learning Book P132）。
分类模型的 Loss 为什么使用 cross entropy 而不是 classification error 或 squared error</description>
    </item>
    
    <item>
      <title>Mac使用相关说明</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/mac%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 10 Dec 2017 00:35:43 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/mac%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</guid>
      <description>扩展屏幕 将ipad作为mac的第二个屏幕
Duet Display将ipad设定为扩展屏幕</description>
    </item>
    
    <item>
      <title>EEN论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/prediction_under_uncertainty_with_error-encoding_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 08 Dec 2017 20:15:55 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/prediction_under_uncertainty_with_error-encoding_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Prediction Under Uncertainty with Error-Encoding Networks EEN代码 项目主页
博客资料 LeCun提出错误编码网络，可在不确定环境中执行时间预测
PREDICTION UNDER UNCERTAINTY WITH ERROR-ENCODING NETWORKS 论文摘要部分中文
相关描述 论文主要还是基于将将来帧的预测分解为一个确定性网络和隐变量网络。</description>
    </item>
    
    <item>
      <title>Dynamic_Filter_Networks论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/dynamic_filter_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Tue, 05 Dec 2017 20:44:29 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/dynamic_filter_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Dynamic Filter Networks 代码</description>
    </item>
    
    <item>
      <title>爬虫使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 03 Dec 2017 13:33:26 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>伪装浏览器 from fake_useragent import UserAgent import requests ua = UserAgent() print(ua.chrome) header = {&#39;User-Agent&#39;:str(ua.chrome)} print(header) url = &amp;quot;https://www.hybrid-analysis.com/recent-submissions?filter=file&amp;amp;sort=^timestamp&amp;quot; htmlContent = requests.get(url, headers=header) print(htmlContent)  fake-useragent
Requests.get in Python using “User-Agent” not simulating a browser request
How to use Python requests to fake a browser visit?
bs4使用技巧 bs4查询对象 How to find tags with only certain attributes - BeautifulSoup
BeautifulSoup ：一些常用功能的使用和测试
How to find elements by class Ask Question
获取href BeautifulSoup getting href [duplicate] Ask</description>
    </item>
    
    <item>
      <title>Zsh使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/zsh%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 02 Dec 2017 13:14:20 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/zsh%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>相关资料 oh-my-zsh
更新Zsh upgrade_oh_my_zsh  How do I update zsh to the latest version?</description>
    </item>
    
    <item>
      <title>Latex使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/latex%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 01 Dec 2017 13:54:31 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/latex%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>相关资料 安装包 maxtex maxtex 2013下载
文本编辑器 Texmaker pdf viewer和文本在同一窗口中 Texmaker: source editor and embedded pdf viewer on same window
中文字体 最好使用latex2013，并将ctex-xecjk-winfonts.def修改为如下
sudo vim /usr/local/texlive/2013/texmf-dist/tex/latex/ctex/fontset/ctex-xecjk-winfonts.def % vim:ft=tex \setCJKmainfont[BoldFont={STHeiti},ItalicFont={STKaiti}] {STSong} \setCJKsansfont{STHeiti} \setCJKmonofont{STFangsong} \setCJKfamilyfont{zhsong}{STSong} \setCJKfamilyfont{zhhei}{STHeiti} \setCJKfamilyfont{zhkai}{STKaiti} \setCJKfamilyfont{zhfs}{STFangsong} % \setCJKfamilyfont{zhli}{LiSu} % \setCJKfamilyfont{zhyou}{YouYuan} \newcommand*{\songti}{\CJKfamily{zhsong}} \newcommand*{\heiti}{\CJKfamily{zhhei}} \newcommand*{\kaishu}{\CJKfamily{zhkai}} \newcommand*{\fangsong}{\CJKfamily{zhfs}} % \newcommand*{\lishu}{\CJKfamily{zhli}} % \newcommand*{\youyuan}{\CJKfamily{zhyou}} \endinput  安装TeX及中文支持
Mac 下编写中文 Beamer
在Mac OS系统下配置使用基于TeXLive/MacTeX的CTeX+XeLaTeX方案处理中文文档 
在Mac下使用LaTeX的中文字体
LaTeX 在 Mac 下的中文环境配置 推荐指数****
为 MacTeX 配置中文支持
在Mac OS系统下配置使用基于TeXLive/MacTeX的CTeX+XeLaTeX方案处理中文文档 
命令行下使用 # make latex file latex *.</description>
    </item>
    
    <item>
      <title>模型压缩相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E6%A8%A1%E5%9E%8B%E5%8E%8B%E7%BC%A9%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Fri, 01 Dec 2017 12:35:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_12/%E6%A8%A1%E5%9E%8B%E5%8E%8B%E7%BC%A9%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description> 综述 A Survey of Model Compression and Acceleration for Deep Neural Networks 综述文章
相关博客 为了压榨CNN模型，这几年大家都干了什么
Convolutional-Neural-Network-Compression-Survey
相关论文 </description>
    </item>
    
    <item>
      <title>Fully_Context论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fully_context-aware_video_prediction%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Wed, 29 Nov 2017 12:57:49 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fully_context-aware_video_prediction%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Fully Context-Aware Video Prediction 主页</description>
    </item>
    
    <item>
      <title>参考文献格式说明</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 28 Nov 2017 20:14:04 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E/</guid>
      <description>参考资料 参考文献标准格式
常用引用 国家规划 作者或者某单位.名称[EB/OL].网址,年-月-日. [1] 国务院.国务院关于印发新一代人工智能发展规划的通知[EB/OL],2017-07-20.
期刊文章 [序号]主要责任者.文献题名[J].刊名,年,卷(期):起止页码. [2] Krizhevsky A, Sutskever I, Hinton G E. ImageNet classification with deep convolutional neural networks[J]. Communications of the Acm, 2012, 60(2):2012.
会议论文集 序号 作者．题名．见:(In:)主编.(,eds.)论文集名．出版地：出版社，出版年．起页-止页 [1] 张全福，王里青．“百家争鸣”与理工科学报编辑工作[C]．见：郑福寿主编．学报编论丛：第2集． 南京：河海大学出版社，1991．1-4 [2] Dupont B．Bone marrow transplantation in severe combined inmunodeficiency[C]．In：White H J，Smith R，eds．Proc. of the 3rd Annual Meeting of Int Soc for Experimental Hematology (ISEH)．Houston：ISEH，1974．44-46</description>
    </item>
    
    <item>
      <title>Opencv使用相关说明</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/opencv%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 28 Nov 2017 11:34:10 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/opencv%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</guid>
      <description>安装 Mac安装 这里以2.4.9为例，安装过程中出现以下问题。
  在MacOS10.10安装OpenCV2.4.10遇到的问题和解决办法
Mac平台下openCV的搭建(Xcode + openCV 2.4.10)
Build opencv 2.4.10 on Mac 10.10.3 failed
fatal error: &amp;lsquo;QTKit/QTKit.h&amp;rsquo; file not found when I build OpenCV on mac
HSV颜色空间 相关文档示例 learning_2017_11/hsv_detection/hsv_color_show.ipynb
Fire Detection with Computer Vision</description>
    </item>
    
    <item>
      <title>激活函数相关说明</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 27 Nov 2017 22:23:15 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</guid>
      <description>相关资料 Visualising Activation Functions in Neural Networks
26种神经网络激活函数可视化</description>
    </item>
    
    <item>
      <title>音乐相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%9F%B3%E4%B9%90%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 26 Nov 2017 20:13:01 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%9F%B3%E4%B9%90%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>音乐下载 鉴于现在各个平台对音乐的版权限制，早点下载还是很有必要的，下面推荐的这个软件可以从youtube上下载音乐到本地。Instant-Music-Downloader</description>
    </item>
    
    <item>
      <title>网络压缩相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E7%BD%91%E7%BB%9C%E5%8E%8B%E7%BC%A9%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 26 Nov 2017 20:10:18 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E7%BD%91%E7%BB%9C%E5%8E%8B%E7%BC%A9%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>相关论文  EIE: Efficient Inference Engine on Compressed Deep Neural Network 论文 代码 将AlexNet网络大小从233MB减少到了8.9MB DeepRebirth: Accelerating Deep Neural Network Execution on Mobile Devices 论文 三星研究院加速深度学习的方法  博客资料  DeepRebirth——通过融合加速网络  网络参数大小 convnet-burden 包含了主流模型的参数大小</description>
    </item>
    
    <item>
      <title>道路识别相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%81%93%E8%B7%AF%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 26 Nov 2017 20:05:28 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E9%81%93%E8%B7%AF%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description> 相关论文  VPGNet: Vanishing Point Guided Network for Lane and Road Marking Detection and Recognition 论文 VPGNet 三星研究院的文章  </description>
    </item>
    
    <item>
      <title>增强学习相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 26 Nov 2017 19:57:10 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description> 相关教程 train-robot-arm-from-scratch 莫烦的新教程，关于深度学习的，可以fork一下
相关资料  ReinforcementZeroToAll ptan reinforcement learning toolkit for pytorch  </description>
    </item>
    
    <item>
      <title>Tensorflow使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/tensorflow%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 26 Nov 2017 10:37:09 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/tensorflow%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>相关教程 tensorflow-mnist-tutorial 以漫画的形式使用Tensorflow进行教学。
TensorFlow-Examples 使用tensorflow完成的机器学习和深度学习模块。
相关描述 如何看待tensorflow新出的eager模式？ 介绍了TensorFlow中eager动态图语言。
tensorboard相关说明 tensorboard中的数据可以下载，启动左侧的下载即可。
# 启动tensorboard，默认端口6006 tensorboard --logdir=checkpoints --port 6007  tensorflow model使用问题 # protoc版本为3.3才可以 /usr/local/protoc/bin/protoc object_detection/protos/*.proto --python_out=.  How to fix the bug “Expected &amp;ldquo;required&amp;rdquo;, &amp;ldquo;optional&amp;rdquo;, or &amp;ldquo;repeated&amp;rdquo;.”？
TesorFlow使用GPU GPU资源释放，首先使用nvidia-smi查看pid，对应的高使用pid结束进程即可。
使用 GPU
TensorFlow中设置GPU
Tensorflow 学习笔记（七） ———— 多GPU操作</description>
    </item>
    
    <item>
      <title>Learning_Features_by_Watching_Objects_Move论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_features_by_watching_objects_move%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 24 Nov 2017 21:34:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_features_by_watching_objects_move%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Learning Features by Watching Objects Move 代码 项目主页 这篇文章主要使用非监督的方法从视频运动信息中来作为分割的标注信息，从而学习语义分割。</description>
    </item>
    
    <item>
      <title>Generating_Sequences_With_Recurrent_Neural_Networks论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/generating_sequences_with_recurrent_neural_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 23 Nov 2017 13:23:32 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/generating_sequences_with_recurrent_neural_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Generating Sequences With Recurrent Neural Networks demo 代码 slides</description>
    </item>
    
    <item>
      <title>Convolutional_LSTM论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/convolutional_lstm_network_a_machine_learning_approach_for_precipitation_nowcasting%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 23 Nov 2017 02:58:32 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/convolutional_lstm_network_a_machine_learning_approach_for_precipitation_nowcasting%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description> 论文资料 Convolutional LSTM Network: A Machine Learning Approach for Precipitation Nowcasting 论文 代码 代码torch
20160629-Convolutional LSTM Network: A Machine Learning Approach for Precipitation Nowcasting 这是其他人对该篇论文的简要解读，思路较为清除。
作者Xingjian Shi (施行健)
VALSE20160323-Panel-WanfGangNTU_ShiXingjianHKUST_ShiBaoguangHUST.mp4 施行健在VALSE上的演讲内容
博客资料 Convolutional LSTM keras对Conv LSTM相关的讨论
conv_lstm.py keras上对Conv LSTM相关实现例子
相关代码 Convolutional-LSTM-in-Tensorflow 其中提供了ConvLSTM网络的实现结构，同时包括了改进的ConvLSTM网络结构
lstms.py 提供了convlstm的相关代码
Convolution_LSTM_pytorch 使用pytorch实现的卷积lstm网络
网络结构 经典LSTM网络结构 经典LSTM的公式 预测云图的Conv LSTM结构 Conv LSTM网络结构的内部结构 Conv LSTM的公式 </description>
    </item>
    
    <item>
      <title>Learning_to_Generate_Long Term_Future_via_Hierarchical_Prediction论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_to_generate_long-term_future_via_hierarchical_prediction%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 23 Nov 2017 02:50:08 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_to_generate_long-term_future_via_hierarchical_prediction%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Learning to Generate Long-term Future via Hierarchical Prediction 项目主页 代码
论文效果 当视频外框为绿色时，为真实视频；当外框变红时，为AI生成的“假”视频。最左边是今天要介绍的方法，中间和右边用以前方法达到的效果。其中主要比较了ConvLSTM和基于光流的方法。
博客资料 这个AI能预测未来并生成逼真的视频（论文来自谷歌大脑、北航等）
Learning to Generate Long-term Future via Hierarchical Prediction解读
相关观点 这篇文章提出了分层的网络结构用于视频帧的预测。作者提到之前的一些文章的局限性在于：之前的工作的video generation均是pixel-to-pixel的过程。作者提到之前的方法在long-term预测时候，错误随着预测的时间成几何增加，原因在于在预测long-term帧的时候，会使用到之前预测的帧，这样随着时间的推移，噪声和错误会累积（作者在文中说，为了做出合理的long-term预测，模型对于pixel-to-pixel的噪声需要有很强的鲁棒性，然而噪声的增强很快会掩盖掉结构信息），作者的解决方案是即使在预测long-term帧的时候，也不会使用之前预测的帧，这样可以很好的截断误差的累积。下面我们详细介绍下这篇文章的分层网络结构(Hierarchical Prediction)。</description>
    </item>
    
    <item>
      <title>DEEP_MULTI SCALE_VIDEO_PREDICTION_BEYOND_MEAN_SQUARE_ERROR论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/deep_multi-scale_video_prediction_beyond_mean_square_error%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sun, 19 Nov 2017 23:03:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/deep_multi-scale_video_prediction_beyond_mean_square_error%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 DEEP_MULTI-SCALE_VIDEO_PREDICTION_BEYOND_MEAN_SQUARE_ERROR 论文 代码 项目主页</description>
    </item>
    
    <item>
      <title>Tmux使用相关</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/tmux%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 19 Nov 2017 21:17:03 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/tmux%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>Tmux使用相关 一个命令行下可以创建多个tmux session，而在一个session中可以创建多个window，一个window中可以创建多个panel，tmux输入首先建立session比如0，然后在session中默认有一个窗口比如为 prefix为ctrl+b prefix [ 向上滚动 tmux ls tmux kill-session -t 7 tmux -S 0 prefix d # detach the session # attach session比如0 tmux a -t session_name(0)  美化tmux .tmux
How can I page up or down in tmux with Terminal.app?
Linux下终端利器tmux
Tmux 快捷键 &amp;amp; 速查表
优雅地使用命令行：Tmux 终端复用
tmux_cheatsheet.markdown
Byobu 指南</description>
    </item>
    
    <item>
      <title>安卓反编译</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%AE%89%E5%8D%93%E5%8F%8D%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 19 Nov 2017 12:22:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%AE%89%E5%8D%93%E5%8F%8D%E7%BC%96%E8%AF%91/</guid>
      <description>博客资料 Android反编译技术总结 主要按照这篇博客来进行反汇编
相关工具 android-classyshark
JD Project
Apktool
Apktool Install Instructions
dex2jar</description>
    </item>
    
    <item>
      <title>MatchNet _Unifying_Feature_and_Metric_Learning_for_Patch Based_Matching论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/matchnet-_unifying_feature_and_metric_learning_for_patch-based_matching%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 17 Nov 2017 17:56:17 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/matchnet-_unifying_feature_and_metric_learning_for_patch-based_matching%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 MatchNet: Unifying Feature and Metric Learning for Patch-Based Matching 代码
博客资料 MatchNet-_Unifying_Feature_and_Metric_Learning_for_Patch-Based_Matching</description>
    </item>
    
    <item>
      <title>CortexNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/cortexnet_a_generic_network_family_for_robust_visual_temporal_representations%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Wed, 15 Nov 2017 21:57:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/cortexnet_a_generic_network_family_for_robust_visual_temporal_representations%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 CortexNet: a Generic Network Family for Robust Visual Temporal Representations 代码 项目主页 该项目使用pytorch完成视频的预测。</description>
    </item>
    
    <item>
      <title>LSTM相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/lstm%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Wed, 15 Nov 2017 20:06:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/lstm%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>论文资料  Learning to Forget: Continual Prediction with LSTM 讲述LSTM中的forget gate  书籍资料 Supervised Sequence Labelling with Recurrent Neural Networks 链接 使用RNN来进行监督式序列标注
博客资料 Understanding LSTM Networks 这篇博客对LSTM层层深入，易于理解，该作者的图较生动，其博客同时包含很多神经网络的资料。
The Unreasonable Effectiveness of Recurrent Neural Networks
RNN模型由相关的前后模型组成 包含一层的LSTM网络 Recurrent neural network
LSTM Networks for Sentiment Analysis 之前看的theano教程中关于LSTM网络结构的，其中的方程和Conv LSTM论文中的几乎一样。
基本结构 通过下述公式计算得到 代码参考 Learning to Execute 该代码使用一个LSTM构成的RNN网络来训练python代码的输出，用来预测目标程序结果的输出。
The Unreasonable Effectiveness of Recurrent Neural Networks 实现的代码 char-rnn 该项目输入一个文本字符然后输出接下来的字符，可以应用在字符生成中。
torch实现的RNN结构 ni = 1; nh = 8; no = 1; len = 3 h0 = nn.</description>
    </item>
    
    <item>
      <title>机器学习课程</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E6%94%B6%E9%9B%86/</link>
      <pubDate>Wed, 15 Nov 2017 16:44:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E6%94%B6%E9%9B%86/</guid>
      <description> 相关资料  3D-Machine-Learning 3D相关的机器学习资源。  机器学习课程收集  Machine Learning: 2014-2015 该课程讲义和视频都有，非常适合学习，同时其中穿插了torch的编程，课程大作业也是使用torch来完成，可以用来作为torch的学习。 大作业示例代码 该代码仓库放置了大作业的代码，可以作为参考。 深度学习如何入门？ 知乎中也有提到这个课程 machine-learning udacity上整理的机器学习课程项目，其中有对应的中文版cn-machine-learning。 [TODO] ml-videos 下一个目标将这个清单中的视频基本过一遍。  机器学习书籍收集  Pattern Recognition and Machine Learning 机器学习领域必看书之一，提供python代码PRML，提供了notebook进行学习。  </description>
    </item>
    
    <item>
      <title>Lua使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/lua%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 15 Nov 2017 15:05:39 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/lua%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>相关教程 Learn Lua in 15 Minutes 该代码较为简单，将LUA中的基本语法大致讲完，代码已经下载至cv_learning中可以自己注释增加。
Lua 教程 菜鸟教程，分类清晰，模块化学习。
torch7 readme
torch中文资料
torch nn
torch Cheatsheet
torch-Video-Tutorials 其中提供了torch相关的视频教程，作者实现了一个视频预测的pytorch版本，值得学习。
博客资料 torch学习
torch 深度学习(4)
设置代理 vim /etc/luarocks/config.lua proxy = [[http://10.xx.xx.xx:8888]]  luarocks 代理设置
常用模块 运行torch，输入th torch_cmd_scripts.lua即可，或者在th中输入dofile &amp;lsquo;torch_cmd_scripts.lua&amp;rsquo;
Element-Research 该仓库中提供了大量的torch常用代码，包括rnn，dataload
torchnet local tnt = require &#39;torchnet&#39;  torchnet
torch 读取command参数 local cmd = torch.CmdLine() cmd:option(&#39;-usegpu&#39;, false, &#39;use gpu for training&#39;) local config = cmd:parse(arg) print(string.format(&#39;running on %s&#39;, config.usegpu and &#39;GPU&#39; or &#39;CPU&#39;))  randperm torch.</description>
    </item>
    
    <item>
      <title>Jupyter使用</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/jupyter%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 14 Nov 2017 23:24:13 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/jupyter%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>jupyterlab使用 jupyterlab更加强大，可以实时显示markdown，同时有文件窗口
# 安装如下 pip install jupyterlab jupyter serverextension enable --py jupyterlab --sys-prefix # 使用方法 jupyter lab  jupyterlab
查看tensorboard jupyter tensorboard enable  jupyter_tensorboard
转换成pdf 需要安装pandoc，latex等，在文本转换时支持中文需要修改，nbconvert中的latex模版
# sudo vim /usr/local/lib/python2.7/dist-packages/nbconvert/templates/latex/article.tplx \usepackage{ctex}  Jupyter: downloading notebook as PDF via LaTeX
MacOS Jupyter Notebook 输出PDF中文支持
Jupyter Notebook PDF输出的中文支持
jupyter notebook # 开启jupyter notebook jupyter notebook # 显示notebook列表 jupyter notebook list  How to close IPython Notebook properly?
How to stop the iPython notebook to run the command line, run only python code</description>
    </item>
    
    <item>
      <title>Generating_Videos_with_Scene_Dynamics论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/generating_videos_with_scene_dynamics%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Tue, 14 Nov 2017 16:07:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/generating_videos_with_scene_dynamics%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description> 论文资料 Generating Videos with Scene Dynamics
模型框架 整体框架如下 识别器框架如下 生成器框架如下 </description>
    </item>
    
    <item>
      <title>Temporal_Generative_Adversarial_Nets_with_Singular_Value_Clipping论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/temporal_generative_adversarial_nets_with_singular_value_clipping%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Tue, 14 Nov 2017 15:55:21 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/temporal_generative_adversarial_nets_with_singular_value_clipping%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description> 论文资料 Temporal Generative Adversarial Nets with Singular Value Clipping
运行示例 Moving MNIST数据集 UCF-101数据集 Golf数据集 模型架构 </description>
    </item>
    
    <item>
      <title>Spatial_Transformer_Networks论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/spatial_transformer_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Tue, 14 Nov 2017 00:56:20 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/spatial_transformer_networks%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Spatial Transformer Networks 代码 tps_stn_pytorch Spatial Transformer Network的pytorch实现。
相关博客 Spatial Transformer Networks 阅读笔记</description>
    </item>
    
    <item>
      <title>Playing_for_Data:_Ground_Truth_from_Computer_Games论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/playing_for_data_ground_truth_from_computer_games%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 13 Nov 2017 17:11:09 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/playing_for_data_ground_truth_from_computer_games%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Playing for Data: Ground Truth from Computer Games
运行示例 博客资料 【数据】Playing for Data: Ground Truth from Computer Games
Playing for Data: Ground Truth from Computer Games 该视频为论文的示例demo
Playing for Data: Ground Truth from Computer Games</description>
    </item>
    
    <item>
      <title>Unsupervised_Learning_of_Video_Representations_using_LSTMs论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/unsupervised_learning_of_video_representations_using_lstms%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 13 Nov 2017 16:48:38 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/unsupervised_learning_of_video_representations_using_lstms%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Unsupervised Learning of Video Representations using LSTMs 论文 代码
该文提出了一种结合重构图像和预测图像的模型，发现比单纯地预测图像得到的结果更好，同时提供了一个两个数字moving的数据集MovingMNIST，代码中提供了可以训练的模型。
代码相关 运行示例如下，下图显示的是，第一行图像是源序列，该数据集由20张图像组成，第二行显示的是预测的序列，其中前10张图像是重构的序列，而后10张是预测的序列。 博客资料 【论文笔记】Unsupervised Learning of Video Representations using LSTMs</description>
    </item>
    
    <item>
      <title>视频预测相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%A7%86%E9%A2%91%E9%A2%84%E6%B5%8B%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 13 Nov 2017 15:13:30 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%A7%86%E9%A2%91%E9%A2%84%E6%B5%8B%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>综述 2015-10-09-video-applications.md 是handong1587关注的深度学习在视频方面的应用总结，具有参考价值，可以直接看渲染好的博客
相关论文 A Survey on Deep Video Prediction 该论文是关于深度预测视频领域的一份调研报告，作者是学生 Victor Ge
DEEP PREDICTIVE CODING NETWORKS FOR VIDEO PREDICTION AND UNSUPERVISED LEARNING 本文是关于使用深度学习的方法来预测编码
MoCoGAN: Decomposing Motion and Content for Video Generation
从论文Generating Videos with Scene Dynamics跟踪到，该论文中提到的论文都可以好好研究，与视频预测相关。
e-lab references 这是e-lab实验室对相关研究的文章收集，可以作为无监督学习预测视频的参考。
 Unsupervised Learning of Video Representations using LSTMs 代码 Learning to Generate Long-term Future via Hierarchical Prediction 项目主页 代码 Parallel multi-dimensional LSTM, with application to fast biomedical volumetric image segmentation 论文 和ConvLSTM一样拓展了FCLSTM从而捕捉了空间-时间关系。 Decomposing Motion and Content for Natural Video Sequence Prediction 主页 代码 Learning to linearize under uncertainty Action-conditional video prediction using deep networks in atari games Unsupervised learning of visual structure using predictive generative networks Two-stream convolutional networks for action recognition in videos 双流视频预测 Convolutional Two-Stream Network Fusion for Video Action Recognition 主页 代码 双流视频预测，同时编码空间和时间信息（光流） TS-LSTM and Temporal-Inception: Exploiting Spatiotemporal Dynamics for Activity Recognition Long-term Temporal Convolutions for Action Recognition 论文 主页 代码 Video Scene Parsing with Predictive Feature Learning Semantic Video Segmentation by Gated Recurrent Flow Propagation 论文 Stochastic Adversarial Video Prediction 论文 使用对抗生成网络进行视频预测。  相关IDEA  能否使用安卓的视频数据+传感器数据来进行数据集的收集，并且同时进行视频预测和语义分割。 能使用视频预测技术对NBA篮球的动作进行预测   相关开源项目  e-lab e-lab实验室中实现了很多视频预测的模型，大部分使用torch或者pytorch。Welcome to e-Lab!</description>
    </item>
    
    <item>
      <title>深层对抗网络相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%B7%B1%E5%B1%82%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 13 Nov 2017 00:48:20 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%B7%B1%E5%B1%82%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>论文资料  Generative Adversarial Networks Conditional Generative Adversarial Nets Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks NIPS 2016 Tutorial: Generative Adversarial Networks StarGAN: Unified Generative Adversarial Networks for Multi-Domain Image-to-Image Translation 同时pytorch代码StarGAN 实现了一定模版的图像转换（生气，开心和恐惧） Which Training Methods for GANs do actually Converge?以及相应代码GAN_stability Are GANs Created Equal? A Large-Scale Study 对应代码compare_gan  博客资料 Generative Adversarial Networks (GANs) in 50 lines of code (PyTorch) 4.6 GAN 生成对抗网络 (PyTorch tutorial 神经网络 教学)</description>
    </item>
    
    <item>
      <title>PredNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/deep_predictive_coding_networks_for_video_prediction_and_unsupervised_learning%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sun, 12 Nov 2017 15:18:56 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/deep_predictive_coding_networks_for_video_prediction_and_unsupervised_learning%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning 论文 代码 torch-prednet torch prednet是e-lab实验室重新实现的一个预测网络 prednet_comment代码注释 该代码中为其他研究人员的相关注释。
代码运行示例，下面是在Caltech Pedestrian数据集上运行的下一帧预测结果，该模型在KITTI数据集中训练。 代码实现 torch-prednet
# 训练相关 th main.lua --batch 1 --nlayers 3 -s --savedir results --dataDir dataSets --dataName data-small # 测试相关 qlua main.lua --model results --dataDir dataSets --dataName data-small --visOnly --useGPU  pytorch-prednet
PredNet-ConvGRU 使用convgru同时用pytorch实现prednet
使用Keras进行视频预测（时间序列）
论文资料 PredNet阅读笔记——从视频预测的角度学习视频表征
相关描述 实验证明，PredNet在视频预测任务表现一般，预测时间短且不够清晰；但在学习视频表征方面表现突出，可以提取物体动态特征，将这些特征用于分类器、参数估算等任务，相比于从静态图像中提取的特征，物体识别准确度会提高。
基本架构 项目需求 项目中需要类似的frame prediction功能，首先准备两个h5文件，其中一个包含图像数据，另一个包含图像数据的来源，比如视频A有30帧，视频B有30帧，这里，将数据预处理为(H, W, C)&amp;mdash;-A&amp;hellip;(H, W, C)&amp;mdash;-B等等，这里有两个文件目录，其中为A和B文件夹表示视频来源，各个文件下</description>
    </item>
    
    <item>
      <title>同时预测场景解析和运动估计相关资料</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%90%8C%E6%97%B6%E9%A2%84%E6%B5%8B%E5%9C%BA%E6%99%AF%E8%A7%A3%E6%9E%90%E5%92%8C%E8%BF%90%E5%8A%A8%E4%BC%B0%E8%AE%A1%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</link>
      <pubDate>Fri, 10 Nov 2017 15:54:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%90%8C%E6%97%B6%E9%A2%84%E6%B5%8B%E5%9C%BA%E6%99%AF%E8%A7%A3%E6%9E%90%E5%92%8C%E8%BF%90%E5%8A%A8%E4%BC%B0%E8%AE%A1%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</guid>
      <description>相关论文 Predicting Deeper into the Future of Semantic Segmentation 代码 项目主页
LR-GAN: Layered Recursive Generative Adversarial Networks for Image Generation 代码
 DEEP MULTI-SCALE VIDEO PREDICTION BEYOND MEAN SQUARE ERROR 论文 代码 Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning 论文 代码 Visual Dynamics: Probabilistic Future Frame Synthesis via Cross Convolutional Networks 论文 项目主页 代码 Generating videos with scene dynamics 论文 代码 使用GAN来生成视屏 Dynamic Filter Networks 论文 代码  同时预测场景解析和运动估计 该问题和项目的要求符合，对下一帧使用运动估计进行了预测，并进行语义分割，此任务结合了这两个问题，同时解决，具有创新性。其中涵盖了语义分割、光流估计和多任务学习领域。</description>
    </item>
    
    <item>
      <title>Aerial语义分割资料收集</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/aerial%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 09 Nov 2017 14:25:40 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/aerial%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</guid>
      <description>相关资料 下图显示了在训练期间ResNet FCN的语义分割更加精确的示例
代码实现 raster-vision提供了空中图像语义分割的示例程序 raster-vision
Semantic Segmentation for Aerial Imagery using Convolutional Neural Network ssai
Semantic Segmentation for Aerial / Satellite Images with Convolutional Neural Networks including an unofficial implementation of Volodymyr Mnih&amp;rsquo;s methods ssai-cnn</description>
    </item>
    
    <item>
      <title>SPPNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/sppnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Tue, 07 Nov 2017 20:56:16 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/sppnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition
sppnet-pytorch pytorch对sppnet空间金字塔池化的实现。
SPP_net
keras-spp
博客资料 SPPNet-引入空间金字塔池化改进RCNN
空间金字塔池化(Spatial Pyramid Pooling, SPP)原理和代码实现(Pytorch)
利用pytorch复现spatial pyramid pooling层
Upside and downside of Spatial Pyramid Pooling
使用 Spatial Pyramid Pooling 让 CNN 接受可变尺寸的图像</description>
    </item>
    
    <item>
      <title>计算机视觉相关资源整理</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 07 Nov 2017 20:14:31 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</guid>
      <description>valse 这是国内华人组织的青年学者计算机视觉领域的研讨会，2014年至今，其中有大量国内计算机视觉大牛分享的报告资源。
slides
videos
AI Conference Deadlines AI Conference Deadlines
计算机视觉相关同行  赵恒爽 The Chinese University of Hong Kong(CUHK)博士生，从PSPNet网络检索到，同时在valse中有他分享的视频资源，主要讲解PSPNet和CINet。valse 赵恒爽分享  Computer Vision领域相关资料 Computer Vision Literature Review
daily-paper-computer-vision
视频 Andrew Rabinovich - Then, Now, Tomorrow: Neural Networks for Computer Vision 这是UberNet的作者对神经网络在当时，现在，将来的一个oral，其中主要介绍了将来会将不同的task结合训练，也就是所谓的Multi Task Learning。
Deep Learning for Computer Vision Andrej Karpathy对深度学习的发展做了一个简单的介绍，从Hubel到LeCun到AlexNet到VGGNet到GoogleNet到ResNet等等，同时也提到了卷积、池化de等等
Recurrent Neural Networks (RNN) and Long Short-Term Memory (LSTM) 通过一个例子将LSTM的原理深入浅出得讲解，从RNN开始，然后引入select gates，ignore gates和forget gates到最后的LSTM网络。
CS231n Lecture 10 - Recurrent Neural Networks, Image Captioning, LSTM Andrej在cs231n上的课，比较浅显，其中有继续研究意义的比如给出的rnn_mnist可以下载阅读。 min-char-rnn.</description>
    </item>
    
    <item>
      <title>ResNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/resnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 06 Nov 2017 13:07:39 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/resnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Deep Residual Learning for Image Recognition
博客资料 Training and investigating Residual Nets
Deep Residual Networks（ResNet） 简介
秒懂！何凯明的深度残差网络PPT是这样的|ICML2016 tutorial
获奖无数的深度残差学习，清华学霸的又一次No.1 | CVPR2016 最佳论文
ResNet之Deeper Bottleneck Architectures
残差网络ResNet笔记
Deep Residual Network 深度残差网络
残差resnet网络原理详解
Deep Residual Networks学习(一)
网络架构 ResNet核心架构Bottleneck Architecture
ResNet网络各个层次的主要框架
Bottleneck的基本结构
使用netscope进行网络可视化
ResNet-152-deploy.prototxt
ResNet-152 netscope
DBA结构 下面是实现细节
代码实现 Deep Residual Learning for Image Recognition
deep-residual-networks
fb.resnet.torch
模型文件 resnet caffe model</description>
    </item>
    
    <item>
      <title>PSPNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/pspnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 06 Nov 2017 13:06:17 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/pspnet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Pyramid Scene Parsing Network
Pyramid Scene Parsing Network主页
网络结构 结果示例 代码实现 pspnet-pytorch
pspnet pytorch实现的pspnet，同时提供了PASCAL VOC 2012和BRATS 2017数据集上训练的权值文件。
PSPNet caffe
PSPNet-TF-Reproduce PSPNet的tensorflow实现。
代码分析 import torch from torch import nn from torch.nn import functional as F import extractors class PSPModule(nn.Module): def __init__(self, features, out_features=1024, sizes=(1, 2, 3, 6)): super().__init__() # PSP池化模块，尺度为1,2,3,6分别为分辨率降低1,2,3,6 self.stages = [] self.stages = nn.ModuleList([self._make_stage(features, size) for size in sizes]) # 将concat所有的特征层，包括4种尺度的PSP以及原先的输入 self.bottleneck = nn.Conv2d(features * (len(sizes) + 1), out_features, kernel_size=1) self.</description>
    </item>
    
    <item>
      <title>ENet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/enet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 06 Nov 2017 10:46:04 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/enet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 ENet: A Deep Neural Network Architecture for Real-Time Semantic Segmentation
博客资料 【CV-Semantic Segmentation】ENet阅读笔记 简单描述整体论文内容，推荐指数**
语义分割论文-ENet 对ENet中相关内容的提取，推荐指数***
Exploring semantic segmentation with deep learning
代码实现 ENet-caffe
ENet pytorch model.py
ENet-training torch
PyTorch-ENet: My introduction to PyTorch
PyTorch-ENet 对应的pytorch实现。
TensorFlow-ENet
ENet-caffe运行相关 # 测试分割结果 python scripts/test_segmentation.py --model prototxts/enet_deploy_final.prototxt --weights enet_weights_zoo/cityscapes_weights.caffemodel --colours scripts/cityscapes19.png --input_image example_image/munich_000000_000019_leftImg8bit.png --out_dir example_image/  测试结果
相关描述 ENet网络运行速度较快，在I5处理器上每帧运行时间为2s左右，在Titan X上可以达到实时分割的效果。</description>
    </item>
    
    <item>
      <title>UNet论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/unet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sun, 05 Nov 2017 23:05:42 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/unet%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 U-Net: Convolutional Networks for Biomedical Image Segmentation
相关架构 编码器为常规的卷积层和池化层，解码器将U对面的解码器的卷积层上采样到当前解码器层。
代码实现 unet keras 该仓库使用keras来实现unet，由于unet数据过少，仓库使用了相应的数据增强的方法来扩充数据集。
class UNetEnc(nn.Module): def __init__(self, in_channels, features, out_channels): super().__init__() self.up = nn.Sequential( nn.Conv2d(in_channels, features, 3), nn.ReLU(inplace=True), nn.Conv2d(features, features, 3), nn.ReLU(inplace=True), nn.ConvTranspose2d(features, out_channels, 2, stride=2), nn.ReLU(inplace=True), ) def forward(self, x): return self.up(x) class UNetDec(nn.Module): def __init__(self, in_channels, out_channels, dropout=False): super().__init__() layers = [ nn.Conv2d(in_channels, out_channels, 3), nn.ReLU(inplace=True), nn.Conv2d(out_channels, out_channels, 3), nn.ReLU(inplace=True), ] if dropout: layers += [nn.Dropout(.5)] layers += [nn.</description>
    </item>
    
    <item>
      <title>常用RSS网站</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%B8%B8%E7%94%A8rss%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sun, 05 Nov 2017 10:56:43 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%B8%B8%E7%94%A8rss%E7%BD%91%E7%AB%99/</guid>
      <description>github GitHub Trends RSS
期刊RSS 了解我的领域的新研究有助于保持我的工作知情和相关。 Knowing about new research in my field helps keep my work informed and relevant. RSS Feeds for Scientific Journals
计算机视觉  IEEE Trans. on Image Processing (TIP) IEEE Trans. on Pattern Analysis and Machine Intelligence (PAMI) IEEE Trans. on Medical Imaging (TMI) International Journal of Computer Vision (IJCV) IEEE Trans. on Control Systems Technology (TCST) IET Computer Vision Machine Vision and Applications Journal of Mathematical Imaging and Vision Computer Vision and Image Understanding Image and Vision Computing ArXiv.</description>
    </item>
    
    <item>
      <title>深度学习网络初始化trick</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%88%9D%E5%A7%8B%E5%8C%96trick/</link>
      <pubDate>Sun, 05 Nov 2017 10:19:27 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%88%9D%E5%A7%8B%E5%8C%96trick/</guid>
      <description> 网络权重初始化 TODO
 Initialization of deep networks nninit pytorch中常见的初始化策略，包括uniform、normal、constant、xavier_uniform、xavier_normal、kaiming_uniform、kaiming_normal、orthogonal、sparse等。  </description>
    </item>
    
    <item>
      <title>Faster_rcnn论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/faster_rcnn%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sat, 04 Nov 2017 20:15:48 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/faster_rcnn%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks
博客相关 【目标检测】RCNN算法详解
【目标检测】Fast RCNN算法详解
【目标检测】Faster RCNN算法详解
深度学习论文笔记：Faster R-CNN
深度学习实践经验：用Faster R-CNN训练行人检测数据集Caltech——准备工作
fasterRCNN详解
Object Detection and Classification using R-CNNs 非常需要深入了解的博客。
代码实现 技术上将RPN网络和Fast R-CNN网络结合到了一起，将RPN获取到的proposal直接连到ROI pooling层，是一个CNN网络实现端到端目标检测的框架。
RCNN的思路最为简单，首先使用Selective Search将图像的目标候选区域筛选出来，然后通过使用ImageNet网络将候选区域的特征提取出来并作为SVM的特征进行训练，分类得到是否是目标。
边框回归（Bouding Box Regression）：是对RegionProposal进行纠正的线性回归算法，目的是为了让Region Proposal提取到的窗口与目标窗口（Ground Truth）更加吻合。
下面是网络对比图
TFFRCNN
py-faster-rcnn
faster_rcnn_pytorch
Faster RCNN anchor_target_layer.py
simple-faster-rcnn-pytorch 简化版本的pytorch faster rcnn实现。
Faster R-CNN CPU环境搭建 在CPU下实现faster RCNN，对应的代码faster-rcnn-cpu Faster RCNN CPU模式下进行训练 py-faster-rcnn。
RCNN RCNN算法的原理较为简单，首先通过Selective Search提取图像Bouding Box（大约2000个），输入CNN网络（AlexNet预先训练作为特征提取层类似与将候选区域做一个sift的特征提取），然后将fc7特征输入SVM分类器中训练21个label的结果。
训练完 CNN 后，我们就可以通过它提取物体的特征了。这里使用 fc7 层输出的 4096 维的向量作为特征。</description>
    </item>
    
    <item>
      <title>Pytorch实现的vgg网络</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/pytorch%E5%AE%9E%E7%8E%B0%E7%9A%84vgg%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Fri, 03 Nov 2017 22:49:10 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/pytorch%E5%AE%9E%E7%8E%B0%E7%9A%84vgg%E7%BD%91%E7%BB%9C/</guid>
      <description>vgg网络 vgg网络由于其具有较强的特征提取能力，被广泛作为一个基本的模块组合在其他的网络中，而pytorch对它的实现尤为简单，下面分析一下源码实现。
# A B D E网络分别表示vgg11, vgg13, vgg16, vgg19网络，其中vgg16和vgg19网络的使用最为频繁，由于vgg网络的基本组成单元较简单，所以其实现也具有优美的架构，其中卷积网络都是stride为1，kernel size为3，padding为1的卷积，该卷积输入输出保持不变，而池化层则使用的是最大池化层，stride为2，kernel size为2 cfg = { &#39;A&#39;: [64, &#39;M&#39;, 128, &#39;M&#39;, 256, 256, &#39;M&#39;, 512, 512, &#39;M&#39;, 512, 512, &#39;M&#39;], &#39;B&#39;: [64, 64, &#39;M&#39;, 128, 128, &#39;M&#39;, 256, 256, &#39;M&#39;, 512, 512, &#39;M&#39;, 512, 512, &#39;M&#39;], &#39;D&#39;: [64, 64, &#39;M&#39;, 128, 128, &#39;M&#39;, 256, 256, 256, &#39;M&#39;, 512, 512, 512, &#39;M&#39;, 512, 512, 512, &#39;M&#39;], &#39;E&#39;: [64, 64, &#39;M&#39;, 128, 128, &#39;M&#39;, 256, 256, 256, 256, &#39;M&#39;, 512, 512, 512, 512, &#39;M&#39;, 512, 512, 512, 512, &#39;M&#39;], } # VGG16 2*2+3*3+3=16 # make_layers构成了vgg网络的特征层，输入为上述cfg，比如vgg16为D，那么首先输入channels为RGB三通道图像，增加每一层使用nn.</description>
    </item>
    
    <item>
      <title>Learning_Deconvolution_Network_for_Semantic_Segmentation</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_deconvolution_network_for_semantic_segmentation/</link>
      <pubDate>Fri, 03 Nov 2017 20:56:26 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/learning_deconvolution_network_for_semantic_segmentation/</guid>
      <description>论文资料 Learning Deconvolution Network for Semantic Segmentation
网络结构 代码实现 DeconvNet</description>
    </item>
    
    <item>
      <title>Multi Scale_Context_Aggregation_by_Dilated_Convolutions论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/multi-scale_context_aggregation_by_dilated_convolutions%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 03 Nov 2017 15:35:00 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/multi-scale_context_aggregation_by_dilated_convolutions%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description> 论文资料 Dilated Convolution的最大价值是可以不改变feature map的大小而增大感受野。而之前的FCN使用pooling下采样来增大感受野，但随后又不得不通过Deconvolution或者upsampling来增大feature map大小，这样的一小一大总会损失很多信息。
Multi-Scale Context Aggregation by Dilated Convolutions 代码
卷积神经网络CNN（5）—— Dilated Convolution
该论文提出了dilation convolution并且提供了各个常用数据集的预训练权值，其中包括camvid，cityscapes，kitti，pascal_voc等。
博客资料  Dilated Convolutions——扩张卷积 语义分割论文-Understand Convolution for Semantic Segmentation 总结较为详细。  </description>
    </item>
    
    <item>
      <title>Understanding_Convolution_for_Semantic_Segmentation论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/understanding_convolution_for_semantic_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 03 Nov 2017 15:12:41 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/understanding_convolution_for_semantic_segmentation%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文资料 【简评】Understanding Convolution for Semantic Segmentation</description>
    </item>
    
    <item>
      <title>常用网络trick</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9Ctrick/</link>
      <pubDate>Fri, 03 Nov 2017 13:55:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9Ctrick/</guid>
      <description>卷积 卷积的参数计算，主要有卷积核大小F，步长S，padding参数P，假设输入图像为WxW，则输出图像大小为NxN，计算公式如下所示： $$N=(W-F+2P)/S+1$$
conv_arithmetic
转置卷积 转置卷积是卷积相反的过程，计算公式与上述相同，称为转置卷积的原因是，转置卷积的前向传播为卷积的反向传播，而反向传播为卷积的前向传播，只不过乘积为转置： $$W=(N-1)*S-2P+F$$
深度学习图片卷积输出大小计算公式
Transposed Convolution, Fractionally Strided Convolution or Deconvolution
Deconvolution and Checkerboard Artifacts</description>
    </item>
    
    <item>
      <title>FCN_论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fcn_%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 03 Nov 2017 13:42:41 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fcn_%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>参考资料 该论文在CNN应用在语义分割任务上扮演了非常重要的角色，从这篇论文开始，很多语义分割网络都采用了类似的网络结构。
 模型架构 该模型将全连接层转换为卷积层，并且最后一层为装置卷积网络，将像素从缩小尺寸的恢复到原始图像大小，其中也包括了crop将多于的部分裁剪掉，直接恢复结果比较稀疏，论文使用前几层网络结合得到fcn8s和fcn16s的结果更加平滑，这是因为浅层的网络具有更详细的细节信息，这种组合的结构被称为skip connection架构，这也是decoder的一个思路。
代码实现 pytorch实现 其中可参考我的ipython notebook文件，具体的推导过程以及实现的细节可以参考FCN学习:Semantic Segmentation，其中论文主要的理解部分为全卷及网络，推导最后的网络输出与原始输入图像大小一致的原因，以及第一层的padding大小为什么为100，其他层都是vgg网络，最后的输出有fcn32s，fcn16s和fcn8s这三种，最简单的推导从fcn32s开始。
fcn ipython notebook
pytorch-fcn
FCN-semantic-segmentation
深度学习图片卷积输出大小计算公式
相关论点 这些抽象的特征对分类很有帮助，可以很好地判断出一幅图像中包含什么类别的物体，但是因为丢失了一些物体的细节，不能很好地给出物体的具体轮廓、指出每个像素具体属于哪个物体，因此做到精确的分割就很有难度。
传统的基于CNN的分割方法：为了对一个像素分类，使用该像素周围的一个图像块作为CNN的输入用于训练和预测。这种方法有几个缺点：一是存储开销很大。例如对每个像素使用的图像块的大小为15x15，然后不断滑动窗口，每次滑动的窗口给CNN进行判别分类，因此则所需的存储空间根据滑动窗口的次数和大小急剧上升。二是计算效率低下。相邻的像素块基本上是重复的，针对每个像素块逐个计算卷积，这种计算也有很大程度上的重复。三是像素块大小的限制了感知区域的大小。通常像素块的大小比整幅图像的大小小很多，只能提取一些局部的特征，从而导致分类的性能受到限制。
而全卷积网络(FCN)则是从抽象的特征中恢复出每个像素所属的类别。即从图像级别的分类进一步延伸到像素级别的分类。这也是使用网络分割图像被称为pixel wise图像语义分割，不过像素级的分割，会产生较大的噪声，导致分割的结果不够平滑。
模型缺点  是得到的结果还是不够精细。进行8倍上采样虽然比32倍的效果好了很多，但是上采样的结果还是比较模糊和平滑，对图像中的细节不敏感。 是对各个像素进行分类，没有充分考虑像素与像素之间的关系。忽略了在通常的基于像素分类的分割方法中使用的空间规整（spatial regularization）步骤，缺乏空间一致性。  全卷积网络 FCN 详解
深度学习（十六）——FCN, SegNet, DeconvNet, DeepLab, ENet, GCN, Ultra Deep Network</description>
    </item>
    
    <item>
      <title>Mask_R CNN论文阅读</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/mask_r-cnn%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 02 Nov 2017 11:29:25 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/mask_r-cnn%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>论文相关资料 Mask R-CNN
We present a conceptually simple, flexible, and general framework for object instance segmentation. Our approach efficiently detects objects in an image while simultaneously generating a high-quality segmentation mask for each instance. The method, called Mask R-CNN, extends Faster R-CNN by adding a branch for predicting an object mask in parallel with the existing branch for bounding box recognition. Mask R-CNN is simple to train and adds only a small overhead to Faster R-CNN, running at 5 fps.</description>
    </item>
    
    <item>
      <title>MXNet使用相关说明</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/mxnet%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Thu, 02 Nov 2017 10:36:22 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/mxnet%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</guid>
      <description> 常用网络结构 DenseNets A MXNet implementation of DenseNet (with BC structure) densenet.mxnet
源码官方实现DenseNet
其他实现 densenet.pytorch
densenet-pytorch
Densenet
ResNet
架构图 </description>
    </item>
    
    <item>
      <title>Linux常用命令记录</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 02 Nov 2017 10:21:14 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</guid>
      <description> 命令行自动补全相关 bash默认提示数量 bash会默认将先前的命令记录到文本中，输入history即可显示，记录命令长度为1000，文件长度为2000。
vim ~/.bashrc # for setting history length see HISTSIZE and HISTFILESIZE in bash(1) HISTSIZE=1000 HISTFILESIZE=2000  apropos相关 输入apropos可以查看相关类别的命令。
apropos file apropos directory  安装fish sudo apt-get install fish  记不住 Linux 命令？这三个工具可以帮你
openssl相关 openssl version -a sudo add-apt-repository ppa:0k53d-karl-f830m/openssl sudo apt-get update sudo apt-get install openssl=1.0.* openssl version -a 降级openssl  </description>
    </item>
    
    <item>
      <title>语义分割相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 01 Nov 2017 23:38:16 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>综述 主要参考这篇博客Semantic Segmentation using Fully Convolutional Networks over the years其中列举了从FCN网络开始的最新的语义分割网络的相关论文和实现。这篇博客同时提供了一篇综述A Review on Deep Learning Techniques Applied to Semantic Segmentation，下面是列举的实现的文中语义分割的pytorch代码实现： pytorch-semseg
Exploring semantic segmentation with deep learning 这篇文章也列举了很多语义分割网络结构。
SemanticSegmentation_DL 这是github上一个科研作者一直更新的语义分割相关论文列表，可以参考。 推荐指数 *****
下文中也有分类好的语义分割网络论文 2015-10-09-segmentation.md
A Review on Deep Learning Techniques Applied to Semantic Segmentation 该论文主要介绍了基于深度学习进行语义分割的相关方法，具有一定的参考价值，下面是翻译的文章。
综述论文翻译：A Review on Deep Learning Techniques Applied to Semantic Segmentation
Computer Vision for Autonomous Vehicles: Problems, Datasets and State-of-the-Art Kitti提供的综述文章，其中一章语义分割可以细看
Kitti 综述文章可视化导航
该文章主要是在空中使用深度学习进行语义分割 Deep Learning for Semantic Segmentation of Aerial Imagery</description>
    </item>
    
    <item>
      <title>Batch_Normalization论文使用分析</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/batch_normalization%E8%AE%BA%E6%96%87%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 01 Nov 2017 15:11:37 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/batch_normalization%E8%AE%BA%E6%96%87%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/</guid>
      <description>参考资料 该论文是2015年深度学习领域的关于提升网络训练速度的文章，原文链接。这个算法目前已经被大量的应用，最新的文献算法很多都会引用这个算法，进行网络训练。
就像激活函数层、卷积层、全连接层、池化层一样，BN(Batch Normalization)也属于网络的一层。在前面我们提到网络除了输出层外，其它层因为低层网络在训练的时候更新了参数，而引起后面层输入数据分布的变化。这个时候我们可能就会想，如果在每一层输入的时候，再加个预处理操作那该有多好啊，比如网络第三层输入数据X3(X3表示网络第三层的输入数据)把它归一化至：均值0、方差为1，然后再输入第三层计算，这样我们就可以解决前面所提到的“Internal Covariate Shift”的问题了。 而事实上，paper的算法本质原理就是这样：在网络的每一层输入的时候，又插入了一个归一化层，也就是先做一个归一化处理，然后再进入网络的下一层。不过文献归一化层，可不像我们想象的那么简单，它是一个可学习、有参数的网络层。既然说到数据预处理，下面就先来复习一下最强的预处理方法：白化。
经过前面简单介绍，这个时候可能我们会想当然的以为：好像很简单的样子，不就是在网络中间层数据做一个归一化处理嘛，这么简单的想法，为什么之前没人用呢？然而其实实现起来并不是那么简单的。其实如果是仅仅使用上面的归一化公式，对网络某一层A的输出数据做归一化，然后送入网络下一层B，这样是会影响到本层网络A所学习到的特征的。打个比方，比如我网络中间某一层学习到特征数据本身就分布在S型激活函数的两侧，你强制把它给我归一化处理、标准差也限制在了1，把数据变换成分布于s函数的中间部分，这样就相当于我这一层网络所学习到的特征分布被你搞坏了，这可怎么办？于是文献使出了一招惊天地泣鬼神的招式：变换重构，引入了可学习参数γ、β，这就是算法关键之处：
深度学习（二十九）Batch Normalization 学习笔记
卷积神经网络CNN（2）—— BN(Batch Normalization) 原理与使用过程详解
RECURRENT BATCH NORMALIZATION recurrent-batch-normalization-pytorch
Recurrent Batch Normalization</description>
    </item>
    
    <item>
      <title>FC DenseNet语义分割论文分析</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fc-densenet%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 01 Nov 2017 10:50:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_11/fc-densenet%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E8%AE%BA%E6%96%87%E5%88%86%E6%9E%90/</guid>
      <description>100层Tiramisu: 用于语义分割的全卷积DenseNets The One Hundred Layers Tiramisu: Fully Convolutional DenseNets for Semantic Segmentation
该文章提供了示例代码可以fork FC-DenseNet，其中数据集的加载在dataset_loaders，在github上看到了使用kears重新实现的网络One-Hundred-Layers-Tiramisu
论文阅读 该文章主要是将DenseNets应用到了FCN中，增加了分割的精度，在CamVid数据集上获得了state of the art的精度，下面是分割结果示意结果。
该网络架构如下所示：
代码运行相关问题 依赖Theano和Lasagne，Theano的版本为0.9即可
pip install theano==0.9  这里因为Lasagne使用最新版的，所以需要下载源码然后编译安装，另外Theano使用gpu需要pygpu，下载libgpuarray代码然后按照安装教程安装即可。
git clone https://github.com/Theano/libgpuarray.git cd libgpuarray mkdir Build cd Build # you can pass -DCMAKE_INSTALL_PREFIX=/path/to/somewhere to install to an alternate location cmake .. -DCMAKE_BUILD_TYPE=Release # or Debug if you are investigating a crash make sudo make install cd .. # This must be done after libgpuarray is installed as per instructions above.</description>
    </item>
    
    <item>
      <title>Numpy使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/numpy%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 31 Oct 2017 17:09:33 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/numpy%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>参考资料 NumPy参考中文资料
常用API使用 numpy.hstack 输入为np.hstack(tup)为一元组，比如(a, b)，表示将a和b数组水平堆叠。
numpy.hstack</description>
    </item>
    
    <item>
      <title>Sklearn使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/sklearn%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 31 Oct 2017 14:50:58 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/sklearn%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>sklearn参考资料 sklearn是机器学习中较为常用的一个python库，其中有大量可用的机器学习方法可以直接使用，具体参考其文档sklearn英文文档，同时社区也有人提供了中文文档scikit-learn机器学习库中文文档翻译项目，scikit-learn中文文档
sklearn中的数据预处理 机器学习中大部分数据在训练前都需要进行数据预处理，比如原图像像素值为0-255，需要将像素转换为-1-1便于分类器训练等等。
StandardScaler StandardScaler
关于使用sklearn进行数据预处理 —— 归一化/标准化/正则化
使用joblib持久化sklearn模型 from sklearn.externals import joblib # 序列化操作 joblib.dump(model,&#39;model.pkl&#39;) # 反序列化操作 model = joblib.load(&#39;model.pkl&#39;)  使用joblib持久化sklearn模型
可视化 yellowbrick sklearn可视化。</description>
    </item>
    
    <item>
      <title>计算机视觉常用数据集</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E5%8F%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 31 Oct 2017 14:25:50 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E5%8F%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>概述 本仓库主要收集计算机视觉相关领域的常用数据集。 - CV Datasets on the web cvpapers提供的分类好的常用计算机视觉数据集网站，包括detection，classification，recognition等等。 - ComputerVisionDatasets 作者提供的常用数据集；
数据集增强方法  AutoAugment albumentations，其中包含了RandomCrop64、PadToSize512、HorizontalFlip、VerticalFlip、Rotate、ShiftScaleRotate、Brightness、ShiftHSV、ShiftRGB、Gamma、Grayscale等数据集增强方法，同时和imgaug、torchvision、Keras的数据集增强方法的速度进行了比较。  视频预测数据集 video-understanding-dataset 视频理解数据集收集，可以参考部分
Moving MNIST Moving MNIST
Moving MNIST包含了10000序列，每一个序列在64x64帧中包含了20个长度显示2个数字运动。
UCF101 UCF101 - Action Recognition Data Set
e-VDS e-VDS
TwenBN数据集 TwenBN发布两个大型DL视频数据集：助力机器视觉通用智能 其中提供了手势识别和物体移动的两个数据集
THE 20BN-JESTER DATASET 手势识别数据集
THE 20BN-SOMETHING-SOMETHING DATASET 人和物交互视频数据集
twentybn-dl 数据集下载脚本
Push Dataset 机械臂操作视频
Push Dataset
DAVIS davis-2017
DAVIS Challenge on Video Object Segmentation 2017
语义分割数据集 Datasets for ADAS
语义分割常用数据集
各领域公开数据集下载
Multimodal Brain Tumor Segmentation Challenge 2018 肿瘤检测数据集。</description>
    </item>
    
    <item>
      <title>Vehicle Detection项目解析</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/vehicle-detection%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 31 Oct 2017 10:20:58 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/vehicle-detection%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90/</guid>
      <description>这是github上的一个开源项目，来源于Udacity自动驾驶课程。 Vehicle detection using machine learning and computer vision techniques for Udacity&amp;rsquo;s self-driving car course.
vehicle-detection
Autopilot-TensorFlow
数据集 Vehicle_database
Caltech categories
GRAZ_02
Object Detection Evaluation</description>
    </item>
    
    <item>
      <title>Cntk使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/cntk%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 31 Oct 2017 09:45:47 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/cntk%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>安装cntk # 安装cntk-python wget https://cntk.ai/PythonWheel/GPU/cntk-2.2-cp27-cp27mu-linux_x86_64.whl sudo pip install cntk-2.2-cp27-cp27mu-linux_x86_64.whl # 安装openmpi wget https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.3.tar.gz tar -xzvf ./openmpi-1.10.3.tar.gz cd openmpi-1.10.3 ./configure --prefix=/usr/local/mpi make -j all sudo make install # 测试安装是否成功 python -c &amp;quot;import cntk; print(cntk.__version__)&amp;quot; # 2.2  Setup Linux Python
Setup CNTK on Linux
CNTK Tutorials
CNTK-World</description>
    </item>
    
    <item>
      <title>开题报告稿纸</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A%E7%A8%BF%E7%BA%B8/</link>
      <pubDate>Mon, 30 Oct 2017 11:39:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A%E7%A8%BF%E7%BA%B8/</guid>
      <description> 视频预测相关文献  Nitish Srivastava等使用LSTM网络替代RNN网络来学习视频序列的表示，从而减少梯度消失、梯度爆炸的问题。该模型使用一个编码器将输入序列转换为固定长度的表示，然后使用LSTM网络来将提取的固定长度的视频序列表示解码完成输入视频序列的重构和将来视频序列的预测。该模型同时比较了原始图像和使用分类网络提取的网络表示作为网络输入时预测的精度，结果显示通过使用监督学习网络学习到的特征作为输入不能提升视频重构的结果，但是能提升预测的精度。 Michael Mathieu等通过对loss函数的改进来探索学习到更好的视频结构表示从而提升预测精度。标准的MSE loss函数训练得到的模型存在预测视频序列模糊等问题，Michael Mathieu等提出多尺度架构，对抗训练方法和一个基于图像梯度差分loss函数这三种不同的学习特征策略来得到更好的结果。 (本文同时和Ranzato的结果比较) William Lotter等借鉴了神经科学领域的预测编码构建了一个预测编码神经网络，并在合成视频序列以及自然视频序列中预测下一帧视频，使用了Conv-LSTM-DeConv的架构进行像素级预测。 Nal Kalchbrenner等提出了一个概率视频模型VPN来估计原始像素值在视频中的联合概率分布。VPN网络模型编码了时间、空间、视频张量的颜色结构，并在Moving MNIST benchmark上获得了可能理论上最好的性能，大大超越了先前最好的模型，该模型预测的结果和置信数据只有微小的差别。 Francesco Cricri通过一种编码器-解码器网络模型，使用循环和前馈连接精巧的设计了一种类似于ResNet架构的视频预测网络VLN。VLN网络通过循环连接使用编码器中网络层的时间信息，并且残差设计大大减少了网络的参数，虽然VLN网络在预测精度仅为VPN网络的一半，但是网络参数大概减少了25倍，缩短了预测时间。  语义分割实验 </description>
    </item>
    
    <item>
      <title>Arxiv计算机视觉每日跟踪</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/arxiv%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%AF%8F%E6%97%A5%E8%B7%9F%E8%B8%AA/</link>
      <pubDate>Mon, 30 Oct 2017 10:52:35 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/arxiv%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%AF%8F%E6%97%A5%E8%B7%9F%E8%B8%AA/</guid>
      <description> 2017-10-30T10:56:28.255+08:00 </description>
    </item>
    
    <item>
      <title>Jquery使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/jquery%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 29 Oct 2017 22:58:35 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/jquery%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>jquery网络 import $ from &#39;jquery&#39;;  $.ajax({ url: this.props.url, dataType: &#39;json&#39;, cache: false, success: function(data) { this.setState({data: data}); }.bind(this), error: function(xhr, status, err) { console.error(this.props.url, status, err.toString()); }.bind(this) });  Can I use jQuery with Node.js?
Node中没搞明白require和import，你会被坑的很惨
jQuery - AJAX get() 和 post() 方法
jQuery.get()</description>
    </item>
    
    <item>
      <title>Javascript使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/javascript%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 29 Oct 2017 11:43:23 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/javascript%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>相关教程 A re-introduction to JavaScript (JS tutorial)</description>
    </item>
    
    <item>
      <title>Brew使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/brew%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 29 Oct 2017 11:38:05 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/brew%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description> brew搜索软件 brew search node
leafnode node node@0.10 node@4 node@6 nodeenv llnode node-build node@0.12 node@5 nodebrew nodenv  MAC使用HOMEBREW安装指定版本NODEJS
brew install node@6
brew缓存目录 $(brew --cache)  </description>
    </item>
    
    <item>
      <title>React使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/react%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 28 Oct 2017 11:10:28 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/react%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>react相关资料 reason react A ReasonReact Tutorial
reason-react
Quickstart
npm镜像 用国内的源（Source）替换官方源，提高下载速度（包括Homebrew, npm 和 Composer 等）
react项目创建和使用 Tutorial: Intro To React
如何学习React
Why did we build React?
【译】给它个五分钟
Give it five minutes
示例程序 js库替换，某些源无法访问，这里使用cdn.bootcss.com
BootCDN
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Hello React&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.bootcss.com/react/0.14.7/react.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.bootcss.com/react/0.14.7/react-dom.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.bootcss.com/babel-core/5.8.23/browser.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;example&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/babel&amp;quot;&amp;gt; // 通过props获取传入新的组件的数据，这里&amp;lt;HelloWorld date=&amp;quot;&amp;quot;/&amp;gt;将HelloWorld当作HTML组件使用，如&amp;lt;image src=&amp;quot;&amp;quot;/&amp;gt; var HelloWorld = React.createClass({ render: function() { // return ( // &amp;lt;a href=&amp;quot;https://facebook.</description>
    </item>
    
    <item>
      <title>Chrome插件开发相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Oct 2017 13:56:57 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>chrome开发相关资料 由于最近搜集资料和图片较多，经常对一些精美的图片想要右键直接同步到git上，但是需求过于小，没有找到合适的插件，于是打算自己倒腾，接下来在学习的过程中主要以开发一款能够右键保存图像到git仓库或者远程应用的插件。
Chrome插件（Extensions）开发攻略
Developer&amp;rsquo;s Guide
JavaScript APIs
Tutorial: Debugging
Overview
Getting Started: Building a Chrome Extension
一些实例
Sample Extensions
What are extensions?
书籍 如何成为一名Chrome应用开发者
Chrome扩展及应用开发（首发版）
相关参考程序  一款书签应用   iBookmark
调试问题 命令行安装插件 /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --enable-easy-off-store-extension-install extensionPath  Mac 命令行安装Chrome插件
background调试相关 插件上的弹出框较好调试，但是background.js任务的调试需要在chrome://extension中点击审查background任务即可。
debug background.js in chrome extension
How to debug Google Chrome background script? [duplicate]
Chrome extension 各個運作 context 下的 debug 方法
web permissions &amp;quot;webRequest&amp;quot;, &amp;quot;webRequestBlocking&amp;quot;  var xhr = new XMLHttpRequest(); xhr.</description>
    </item>
    
    <item>
      <title>Go使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/go%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 27 Oct 2017 09:05:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/go%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>参考资料 tour</description>
    </item>
    
    <item>
      <title>Python第三方库使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 26 Oct 2017 23:48:08 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>书籍  full-speed-python python-patterns A collection of design patterns/idioms in Python使用Python注意的涉及模式。  python导入 测试代码尽量在上层目录中
Python绝对导入
How to fix “Attempted relative import in non-package” even with init.py
How to fix “Attempted relative import in non-package” even with init.py
Python 的 import 机制
结构化您的工程
feed更新 使用feedparser解析feed
import feedparser feed_url = &amp;quot;http://export.arxiv.org/rss/cs.CV&amp;quot; feed_class = feedparser.parse(feed_url) print feed_class[&#39;feed&#39;][&#39;title&#39;] print len(feed_class[&#39;entries&#39;]) entry0 = feed_class[&#39;entries&#39;][0] # print(entry0.summary) print(entry0.title) # print(entry0.author) entry0.keys() entry0.title  feedparser
showing list item in python</description>
    </item>
    
    <item>
      <title>Ps使用相关技巧</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/ps%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 26 Oct 2017 22:51:17 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/ps%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7/</guid>
      <description>photoshop改变图层大小 ps中如何单独改变一张图层中图片的大小
两个图层居中 Photoshop 里怎样把一个图层与画布居中对齐？
去除图像中的文字 使用修补工具，筛选移动即可
用PS去除图片中文字的6个方法</description>
    </item>
    
    <item>
      <title>图标设计相关技巧</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E5%9B%BE%E6%A0%87%E8%AE%BE%E8%AE%A1%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 26 Oct 2017 22:37:09 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E5%9B%BE%E6%A0%87%E8%AE%BE%E8%AE%A1%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7/</guid>
      <description>emoji图标 emojipedia</description>
    </item>
    
    <item>
      <title>课题工作_2017_10_25</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E8%AF%BE%E9%A2%98%E5%B7%A5%E4%BD%9C_2017_10_25/</link>
      <pubDate>Wed, 25 Oct 2017 23:52:02 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E8%AF%BE%E9%A2%98%E5%B7%A5%E4%BD%9C_2017_10_25/</guid>
      <description> 可行区域识别算法  完成可通行区域算法的移植，目前完成了SegNet和FCN算法的移植，可以在软件中选择这两种算法的切换； 编写可行区域识别演示平台软件，界面采用pyqt，算法集成pycaffe，显示使用opengl，目前已经完成输入已经拍摄完成的视频，提取图像进行可通行区域分割并显示在界面上； 采集无人机拍摄图像，并使用ffmpeg对图像进行解码，提取部分图像作为算法示例图像； 编写图像标注软件，输入图像文件夹，对每一张图像使用bounding box进行标注； 列大疆M100所需清单并购买配件； 修改去年暑假写的多机器人定位专利 将zed双目摄像头采集的数据按照ros的协议写入并显示在主界面上  演示平台软件界面显示 算法执行界面 演示平台关于界面 数据集标签颜色对应类别显示界面 数据集标注界面（待完成） 机器人显示界面（待完成） 按照最初的设想，最好可以使用gazebo等等已经集成好的机器人可视软件，但是这些都是独立的软件，无法集成打包到自己的软件中，下述是通过python调用ros可视化软件rviz的示意图，目前有两种思路，如果继续使用rviz，则需要两个窗口，同时需要设计一套两个软件的信息交互协议，另一种思路使用matplot等软件绘制一个3D的视图，将机器人用点表示，但是模型的可视化能力稍微弱了一点。
大疆采购合同 大疆发布开发用产品 经纬M100和Guidance 供货商：杭州金维尼科技有限公司 联系方式：吕珍珍：座机-0571-56887671，15394263089
大疆m100报价 大疆m100裸机：19000 Guidance视觉传感导航系统：5500 Guidance连接套件：450 Manifold妙算：2775 禅思 Z3 云台相机：5999 禅思 X3 一体化云台相机：2999（不包含SD卡） 经纬 M100 - X3/Z3 云台安装套件：299 经纬 M100 - TB48D电池：1199
调试大疆M100交由小毛负责，待完成飞行以及数据交互，使用提供的ROS包传输数据至主机上。 多机器人专利修改   </description>
    </item>
    
    <item>
      <title>Shadowsocks使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/shadowsocks%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 22:39:11 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/shadowsocks%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>privoxy代理 配置代理 # 注释listen-address localhost:8118并在最后一行添加，这里1081是设置的另一个端口 forward-socks5 / 127.0.0.1:1081 . listen-address 0.0.0.0:8118 sudo service privoxy restart  Privoxy搭建代理映射
Mac下安装privoxy brew install privoxy 开机自启 启动privoxy
/usr/local/Cellar/privoxy/3.0.26/sbin/privoxy /usr/local/etc/privoxy/config  修改LaunchAgents的文件，并执行下述命令自启
sudo launchctl load /Library/LaunchAgents/local.privoxy.plist # 查看系统是否真正启动privoxy ps aux | grep privoxy  # vim /Library/LaunchAgents/local.privoxy.plist &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;local.arcueid.privoxy&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;/usr/local/sbin/privoxy&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;--no-daemon&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;/usr/local/etc/privoxy/config&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;/usr/local/Cellar/privoxy/3.0.26/sbin/privoxy.log&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;/usr/local/Cellar/privoxy/3.</description>
    </item>
    
    <item>
      <title>Pycharm使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pycharm%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 16:29:59 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pycharm%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>pycharm index慢 打开pycharm的工程，由于工程下有很多数据，pycharm默认会索引数据，导致工程打开较慢，此时需要将这些与代码无关的索引目录加入到工程的excluded目录下。
pycharm启动后总是不停的updating indices&amp;hellip;indexing?
查看array pycharm调试debug只能查看array或者dataframe。
Viewing as Array or DataFrame</description>
    </item>
    
    <item>
      <title>Pip使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pip%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 14:12:33 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pip%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>pip设置代理 pip --proxy 127.0.0.1:8123 install requests  让 pip 走代理
pip设置镜像 vim ~/.pip/pip.conf [global] trusted-host = mirrors.aliyun.com index-url = https://mirrors.aliyun.com/pypi/simple disable-pip-version-check = True # 取消pip更新提醒  How to suppress pip upgrade warning?
pip安装package pip install XXX # 更新python package pip install XXX -U # 重新安装XXX pip install --upgrade --force-reinstall XXX # 搜索可安装的python package版本version pip install XXX==  Can I force pip to reinstall the current version?
Python and pip, list all versions of a package that&amp;rsquo;s available?</description>
    </item>
    
    <item>
      <title>Atom使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/atom%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 13:01:48 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/atom%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>Markdown插件 输入ctrl+shift+p安装markdown preview toggle，该插件可以实时浏览markdown文件，其中插件浏览markdown的快捷键如下所示： - ctrl+shift+m(markdown)打开markdown预览模式 - ctrl+shift+x(mathjax)打开mathjax数学公式预览模式
$$\sum_{i=1}^{n}{i}=\frac{n*(n+1)}{2}$$
由于默认的markdown preview插件不支持数学公式实时显示，因此使用Markdown Preview Enhanced进行markdown文件的渲染，安装方式较为简单，首先输入ctrl+shift+p，然后输入settings view install package and theme然后进入安装界面，然后输入Markdown Preview Enhanced即可找到该插件，然后安装即可，该插件具有的功能较多，可以根据当前界面实时显示编辑，而且view界面随着编辑界面的切换而切换，非常方便。
Markdown Preview Enhanced教程
Markdown Preview Plus
Atom：Markdown编辑利器
Atom与markdown
atom设置代理 # 设置socks5代理 apm config set http-proxy socks5:127.0.0.1:1080 apm config set https-proxy socks5:127.0.0.1:1080 # 取消ssl apm config set strict-ssl false # 取消代理 apm config set http-proxy null apm config set https-proxy null # 查看代理 apm config get http-proxy apm config get https-proxy  Atom 设置和取消代理</description>
    </item>
    
    <item>
      <title>Pytorch使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pytorch%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 12:50:09 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/pytorch%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>pytorch安装 Ubuntu下安装 pip install http://download.pytorch.org/whl/cu75/torch-0.2.0.post3-cp27-cp27mu-manylinux1_x86_64.whl pip install torchvision 使用conda安装 conda install pytorch torchvision -c pytorch  Ubuntu 17.04 安装 pytorch and pytorchvision
相关描述 PyTorch, a year in&amp;hellip;. pytorch发布一年的总结
新手如何入门pytorch？ 知乎上关于pytorch的相关学习建议，非常有参考价值。
PyTorch到底好用在哪里? 比较了PyTorch和TensorFlow的优缺点。
博客资料 pytorch学习笔记（二）：gradient 介绍pytorch中Variable的grad相应计算，说明了optim的引入原因，梯度清零的原因（梯度的累加），Variable保存了tensor和grad，真正计算的仍然是内部的tensor。
pytorch教程 PyTorchZeroToAll
Awesome-pytorch-list 这是pytorch-list的awesome系统，其中的资料可以参考学习一下
grokking-pytorch PyTorch编程思路。
pytorch示例程序 使用官网提供的示例程序来对pytorch进行一个初步大致的了解，对常用深度学习的框架进行一个初步的学习。 目前学习pytorch主要是通过示例程序以及莫烦PYTHON中pytorch的视频教程。
examples pytorch github
pytorch官网
pytorch工程github
PyTorch中文文档
Welcome to PyTorch Tutorials
pytorch-tutorial 这篇教程实现了很多经典模型，值得参考。
莫烦PyTorch，其公开了使用Tensorflow构建计算机视觉的教程仓库Tensorflow-Computer-Vision-Tutorial。
PyTorch-Tutorial
#2.3 Activation Function 激励函数 (PyTorch tutorial 神经网络 教学)
pytorch-examples
训练神经网络
PyTorch 中文网</description>
    </item>
    
    <item>
      <title>Api使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/api%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 01:40:41 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/api%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>openapi规范的API文档 如何编写基于OpenAPI规范的API文档
Swagger：Rest API的描述语言</description>
    </item>
    
    <item>
      <title>Ssh使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/ssh%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 01:07:58 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/ssh%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>ssh相关key ~.终止openssh，对于未响应的ssh关闭连接 ~?显示当前连接ssh的信息  ssh文件传输 rsync断点续传 rsync -rP --rsh=ssh root@114.115.142.49:~/Data2.zip ~/Data/SegmPred/ # 排除某些目录 --exclude=AAA --exclude=BBB --exclude=CCC  Linux rsync实现断点续传
How to exclude multiple directories with rsync?
ssh反向代理 局域网内没有固定IP无法直接被外网访问，使用一个有固定IP地址的外网服务器作为中转站从而进行反向代理，这里假设Local为局域网内电脑，Global为外网电脑，Client为客户电脑，Client&amp;mdash;-&amp;gt;Local转换为Client&amp;mdash;-&amp;gt;Global&amp;mdash;-&amp;gt;Local，首先在Global中配置代理的两个端口
# Global将9001转换为9000 ssh -fCNL &#39;*:9001:localhost:9000&#39; localhost # Local将9000转换为本地的22端口 ssh -fCNR 9000:localhost:22 user_global@ip_global # Client访问Local ssh -p 9001 user_client@ip_global  从外网 SSH 进局域网，反向代理+正向代理解决方案
http反向代理 tcprp 首先编译客户端和服务端
cd client go build ./client 127.0.0.1:8080 example.com:9000 KEYKEY cd server go build ./server :9001 :9000 KEYKEY 访问example.</description>
    </item>
    
    <item>
      <title>Mac使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/mac%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Oct 2017 00:30:09 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/mac%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>mac快捷键 # Finder 回车重命名文件 双击或者command+o打开文件 # 应用程序 command+q关闭程序 command+w关闭程序，但是不完全关闭 # 键盘符号 ⌘ command ⌥ option ⇧ shift ⌃ control ⌫ delete # 新建文件夹 command+shift+N # 查看文件夹信息 command+I  刚从 Windows 转到 macOS，如何快速上手操作？| 新手问号
mac下截取文件夹图标 首先新建文件夹，使用command+I打开文件夹信息窗口，点击左上角图标按住command+C复制图标，然后使用预览command+V，点击第一个图标然后导出即可，像素格式为1024*1024。
自定义 macOS 文件夹图标
mac下换取图标 选中command+I然后点击左上角的图像command+V复制即可，删除按del即可恢复默认图标。
Mac怎么更改文件夹图标，Mac更改文件夹图标
mac下terminal主题 osx-terminal-themes
mac下terminal删除mail mail delete * q
How do I delete all Terminal mail?
mac下修改截图 sudo su cd /System/Library/CoreServices/SystemUIServer.app/Contents/Resources/English.lproj plutil -convert xml1 ScreenCapture.strings vim ScreenCapture.strings 按照下述进行修改然后转换为原格式即可 plutil -convert binary1 ScreenCapture.</description>
    </item>
    
    <item>
      <title>日常开源项目集合</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E6%97%A5%E5%B8%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 25 Oct 2017 00:06:46 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/%E6%97%A5%E5%B8%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%9B%86%E5%90%88/</guid>
      <description>开源IDEA 记录自身开源相关IDEA。 - 做一个用深度学习进行pdf paper重命名的工具。
计算机视觉项目  Flipkart的视觉搜索和推荐系统 fk-visual-search Where to Buy It: Matching Street Clothing Photos in Online Shops  deep-learning-models使用keras的深度学习模型 deep-learning-models mx-maskrcnn使用MXNet实现的RCNN A MXNet implementation of Mask R-CNN mx-maskrcnn StackGAN-v2 StackGAN-v2 pytorch-cv 收集了Pose Estimation、Object Detection、Semantic Segmentation、Image Classification等领域的pytorch实现。 captcha_break 验证码识别。  语音项目  以85％的准确度击败Google的音频reCaptcha uncaptcha  机器人SLAM项目  DynSLAM动态环境下的SLAM 动态环境下同步定位与映射SLAM硕士论文，分别重构静态环境和动态对象（如汽车）。 DynSLAM: Simultaneous Localization and Mapping in Dynamic Environments   加强学习  增强学习调研报告 Deep Reinforcement Learning survey  ML 面向机器学习的特征工程 翻译面向机器学习的特征工程这本书。</description>
    </item>
    
    <item>
      <title>Vim使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/vim%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Oct 2017 22:07:10 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/vim%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>Vim使用相关问题 Vim快捷键 移动光标 # 移动光标 hjik左下上右 w移动一个单词 e移动到行末 0移动到行首 $移动到行末 gg移动到文件第一行 G移动到文件末尾 行号+G移动到行号 ctrl+o跳转回之前的位置 ctrl+i跳转回跳转前的位置  退出 esc进入正常模式 :q!不保存退出 :wq保存退出  删除 x删除当前字符 dw删除至单词末尾 de删除至单词末尾 d$删除至当前行末 dd删除当前行 2dd删除2行  修改 i当前插入文字 A当前行末添加 r替换当前字符 o打开新的一行并进入插入模式  撤销 u撤销操作 ctrl+r取消撤销操作  复制 v进入可视 y复制 p粘贴  状态 ctrl+g显示当前行以及文件信息  查找 /正向查找n是正向N是相反查找 ?逆向查找 set ic忽略大小写 set noic取消忽略大小写 set hls匹配高亮显示 set is显示部分匹配  替换 :s/old/new替换该行第一个匹配 :%s/old/new替换该行所有匹配 :%s/old/new/g替换本文所有匹配  执行外部命令 :!ls  vim 神器的打造方式</description>
    </item>
    
    <item>
      <title>Blog_使用相关问题</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/blog_%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Oct 2017 21:25:20 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/blog_%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>Hugo框架 多个配置 hugo框架支持多个配置文件，可以部署到多个仓库中
hugo --config=config-common.toml  Multiple config files and menu entries
输出目录 默认输出目录为public/
vim config.toml publishDir = &amp;quot;public&amp;quot;  Configure Hugo
hugo行内公式 &amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt; MathJax.Hub.Config({ tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]} }); &amp;lt;/script&amp;gt;  Getting Started
Hugo 静态博客中迄今为止最佳数学公式支持-利用 MathJax &amp;amp; MMark
创建一个 Hugo 网站
MathJax 与 Markdown 的究极融合
spf13.com主题 其中修改如下所示，除了样式的修改，其中有一些由于GFW的原因，国内无法访问，替换内容如下
 partials/head_includes.html中的fonts.googleapis.com修改为fonts.lug.ustc.edu.cn _default/single.html中的cdn.mathjax.org/mathjax/latest修改为cdn.bootcss.com/mathjax/2.7.2 添加评论功能，在config.toml中增加disqusShortname = &amp;ldquo;guanfuchen&amp;rdquo;即可，由于disqus网站需要FQ，日后考虑国内替换的评论网站  mathjax boot cdn
googleapis被墙的解决办法
Hugo静态网站生成器中文教程
解决Hexo博客中 Disqus 在国内不能访问的方案
定制的个人主页  使用terminal样式的个人主页，作者使用angularjs搭建的一个主页  My personal site is a terminal</description>
    </item>
    
    <item>
      <title>git使用</title>
      <link>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/git%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Oct 2017 14:21:29 +0800</pubDate>
      
      <guid>https://guanfuchen.github.io/post/markdown_blog_ws/markdown_blog_2017_10/git%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>git相关使用问题 记录git使用中遇到的一些trick
untracked working tree file git reset --hard HEAD git clean -f -d git pull  untracked working tree file
git增加submodule git submodule add git@gitee.com:chenguanfu/markdown_blog_ws.git markdown_blog_ws  git中submodule的更新 这里貌似只能先把master克隆下来，然后设置每一个submodule的remote地址
git clone git@gitee.com:chenguanfu/blog_ws.git cd blog_ws git submodule foreach git pull git submodule update git submodule update --init --recursive cd public &amp;amp;&amp;amp; git checkout master cd content/post/markdown_blog_ws/ &amp;amp;&amp;amp; git checkout master cd guanfuchen.github.io &amp;amp;&amp;amp; git checkout master  Git Submodule 用法筆記</description>
    </item>
    
  </channel>
</rss>